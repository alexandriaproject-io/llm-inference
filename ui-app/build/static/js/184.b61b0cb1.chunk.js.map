{"version":3,"file":"static/js/184.b61b0cb1.chunk.js","mappings":"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","sources":["components/Timer.js","views/rest-api-single/RestApiDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const timeStart = new Date().getTime()\r\n    const interval = setInterval(() => {\r\n      setSeconds((seconds) => new Date().getTime() - timeStart)\r\n    }, 99)\r\n\r\n    // Clear interval on component unmount\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <>{seconds / 1000}</>\r\n}\r\n\r\nexport default Timer\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  CBadge,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CForm,\r\n  CFormCheck,\r\n  CFormFeedback,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormTextarea,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n} from '@coreui/react'\r\nimport Timer from '../../components/Timer'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport SyntaxHighlighter from 'react-syntax-highlighter'\r\nimport docco from 'react-syntax-highlighter/dist/esm/styles/hljs/docco'\r\nimport atomDark from 'react-syntax-highlighter/dist/esm/styles/hljs/atom-one-dark'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst API_PATH = `${process.env.REACT_APP_BASE_URL}/api/generate-one`\r\n\r\nasync function readHttpStream(\r\n  url,\r\n  postData,\r\n  onChunk = () => undefined,\r\n  onController = () => undefined,\r\n) {\r\n  const start = new Date().getTime()\r\n  const controller = new AbortController()\r\n  const signal = controller.signal\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    body: JSON.stringify(postData), // Convert the JavaScript object to a JSON string\r\n    signal,\r\n  })\r\n  onController(controller)\r\n  const reader = response.body.getReader()\r\n  while (true) {\r\n    const { done, value } = await reader.read()\r\n    if (done) break\r\n    onChunk(new TextDecoder().decode(value))\r\n  }\r\n  return {\r\n    response,\r\n    responseTime: new Date().getTime() - start,\r\n  }\r\n}\r\n\r\nconst Dashboard = () => {\r\n  const [requestId, setRequestId] = useState(uuidv4())\r\n  const [prompt, setPrompt] = useState(\r\n    '[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n',\r\n  )\r\n  const [isStop, setIsStop] = useState(false)\r\n  const [autoContinue, setAutoContinue] = useState(false)\r\n  const [isOnlyNewTokens, setIsOnlyNewTokens] = useState(true)\r\n  const [response, setResponse] = useState(``)\r\n  const [responseController, setResponseController] = useState(null)\r\n  const [lastResponseTime, setLastResponseTime] = useState(0)\r\n  const [responseTimes, setResponseTimes] = useState([])\r\n  const [isError, setIsError] = useState(0)\r\n  const [isWaiting, setIsWaiting] = useState(false)\r\n  const [isStreaming, setIsStreaming] = useState(false)\r\n  const [rawResponse, setRawResponse] = useState(false)\r\n  const [isContinuePrompt, setIsContinuePrompt] = useState(false)\r\n  const [generationConfig, setGenerationConfig] = useState({\r\n    num_beams: 1,\r\n    do_sample: false,\r\n    temperature: 1,\r\n    top_p: 1,\r\n    top_k: 50,\r\n    max_new_tokens: 100,\r\n    repetition_penalty: 1,\r\n    length_penalty: 1,\r\n  })\r\n  const theme = useSelector(({ theme }) => {\r\n    return theme === 'auto'\r\n      ? window.matchMedia('(prefers-color-scheme: dark)').matches\r\n        ? 'dark'\r\n        : 'light'\r\n      : theme\r\n  })\r\n\r\n  const components = {\r\n    // Custom component for text\r\n    code: ({ node, ...props }) => {\r\n      return (\r\n        <span>\r\n          <SyntaxHighlighter language={props.language} style={theme === 'dark' ? atomDark : docco}>\r\n            {props.children}\r\n          </SyntaxHighlighter>\r\n        </span>\r\n      )\r\n    },\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (autoContinue && isContinuePrompt && !isStreaming && !isWaiting && !isStop && !isError) {\r\n      sendPrompt() // need to allow the states to update before continuing\r\n    } else {\r\n      setIsStop(false)\r\n    }\r\n  }, [lastResponseTime])\r\n  const sendPrompt = async () => {\r\n    setIsWaiting(true)\r\n    setIsStreaming(false)\r\n    setIsStop(false)\r\n    setIsError(0)\r\n    setLastResponseTime(0)\r\n\r\n    let fullResponse = ''\r\n    if (!isContinuePrompt) {\r\n      setResponseTimes([])\r\n    } else {\r\n      fullResponse = isOnlyNewTokens ? response : ''\r\n    }\r\n\r\n    try {\r\n      const { responseTime, response } = await readHttpStream(\r\n        API_PATH,\r\n        {\r\n          request_id: requestId,\r\n          prompt: prompt,\r\n          only_new_tokens: isOnlyNewTokens,\r\n          generation_config: generationConfig,\r\n        },\r\n        (text) => {\r\n          fullResponse += text\r\n          setIsWaiting(false)\r\n          setIsStreaming(true)\r\n          setResponse(fullResponse)\r\n        },\r\n        (controller) => setResponseController(controller),\r\n      )\r\n      if (response.status !== 200) {\r\n        setIsError(1)\r\n      } else {\r\n        if (!isContinuePrompt) {\r\n          setResponseTimes([responseTime])\r\n        } else {\r\n          setResponseTimes([...responseTimes, responseTime])\r\n        }\r\n      }\r\n\r\n      setLastResponseTime(responseTime)\r\n    } catch (e) {\r\n      if (e.name === 'AbortError') {\r\n        console.log('Aborting')\r\n        setIsError(2)\r\n      } else {\r\n        console.error(e)\r\n        setIsError(1)\r\n      }\r\n\r\n      setResponseController(null)\r\n      setIsWaiting(false)\r\n      setIsStreaming(false)\r\n      setIsStop(false)\r\n    } finally {\r\n      setResponseController(null)\r\n      setIsWaiting(false)\r\n      setIsStreaming(false)\r\n      const isEos = fullResponse.trimEnd().endsWith('</s>')\r\n      setIsContinuePrompt(!isEos)\r\n      if (isEos) {\r\n        setIsStop(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const abortRequest = () => {\r\n    setIsStop(true)\r\n    console.log(responseController)\r\n    if (responseController) {\r\n      responseController.abort()\r\n    }\r\n  }\r\n  const resetPrompt = () => {\r\n    setRequestId(uuidv4())\r\n    setIsStop(false)\r\n    setResponse('')\r\n    setResponseController(null)\r\n    setLastResponseTime(0)\r\n    setResponseTimes([])\r\n    setIsError(false)\r\n    setIsWaiting(false)\r\n    setIsStreaming(false)\r\n    setIsContinuePrompt(false)\r\n  }\r\n\r\n  //   : 1,\r\n  //   : 1,\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <CForm className=\"pb-3\">\r\n        <CCard className=\"mb-3 \">\r\n          <CCardHeader>Generation Config:</CCardHeader>\r\n          <CCardBody>\r\n            <small>\r\n              <br />\r\n            </small>\r\n            <CRow>\r\n              <CCol cm={6}>\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupText style={{ width: 205 }}>\r\n                    Temperature - <strong>&nbsp;Float</strong>\r\n                  </CInputGroupText>\r\n                  <CFormInput\r\n                    placeholder=\"temperature\"\r\n                    type=\"number\"\r\n                    value={generationConfig.temperature < 0 ? 0 : generationConfig.temperature}\r\n                    onChange={(e) =>\r\n                      setGenerationConfig({\r\n                        ...generationConfig,\r\n                        temperature: parseFloat(e.target.value) || 0,\r\n                      })\r\n                    }\r\n                  />\r\n                </CInputGroup>\r\n              </CCol>\r\n              <CCol cm={6}>\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupText style={{ width: 205 }}>\r\n                    Max new Tokens - <strong>&nbsp;Int</strong>\r\n                  </CInputGroupText>\r\n                  <CFormInput\r\n                    placeholder=\"max_new_tokens\"\r\n                    type=\"number\"\r\n                    value={\r\n                      generationConfig.max_new_tokens < 0 ? 0 : generationConfig.max_new_tokens\r\n                    }\r\n                    onChange={(e) =>\r\n                      setGenerationConfig({\r\n                        ...generationConfig,\r\n                        max_new_tokens: parseInt(e.target.value) || 0,\r\n                      })\r\n                    }\r\n                  />\r\n                </CInputGroup>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <CCol cm={6}>\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupText style={{ width: 205 }}>\r\n                    Number of Beams - <strong>&nbsp;Int</strong>\r\n                  </CInputGroupText>\r\n                  <CFormInput\r\n                    placeholder=\"num_beams\"\r\n                    type=\"number\"\r\n                    value={generationConfig.num_beams < 1 ? 1 : generationConfig.num_beams}\r\n                    onChange={(e) =>\r\n                      setGenerationConfig({\r\n                        ...generationConfig,\r\n                        num_beams: parseInt(e.target.value) || 0,\r\n                      })\r\n                    }\r\n                  />\r\n                </CInputGroup>\r\n              </CCol>\r\n              <CCol cm={6}>\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CFormCheck\r\n                    style={{ cursor: 'pointer' }}\r\n                    checked={generationConfig.do_sample}\r\n                    onChange={(e) =>\r\n                      setGenerationConfig({\r\n                        ...generationConfig,\r\n                        do_sample: e.target.checked,\r\n                      })\r\n                    }\r\n                    className=\"mt-2\"\r\n                    type=\"checkbox\"\r\n                    id=\"doSample\"\r\n                    label={<span style={{ cursor: 'pointer' }}>Do sample ( Bool )</span>}\r\n                  />\r\n                </CInputGroup>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <CCol cm={6}>\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupText style={{ width: 205 }}>\r\n                    Top 'P' - <strong>&nbsp;Float</strong>\r\n                  </CInputGroupText>\r\n                  <CFormInput\r\n                    placeholder=\"top_p\"\r\n                    type=\"number\"\r\n                    value={generationConfig.top_p < 0 ? 0 : generationConfig.top_p}\r\n                    onChange={(e) =>\r\n                      setGenerationConfig({\r\n                        ...generationConfig,\r\n                        top_p: parseFloat(e.target.value) || 0,\r\n                      })\r\n                    }\r\n                  />\r\n                </CInputGroup>\r\n              </CCol>\r\n              <CCol cm={6}>\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupText style={{ width: 205 }}>\r\n                    Top 'K' - <strong>&nbsp;Int</strong>\r\n                  </CInputGroupText>\r\n                  <CFormInput\r\n                    placeholder=\"top_k\"\r\n                    type=\"number\"\r\n                    value={generationConfig.top_k < 0 ? 0 : generationConfig.top_k}\r\n                    onChange={(e) =>\r\n                      setGenerationConfig({\r\n                        ...generationConfig,\r\n                        top_k: parseInt(e.target.value) || 0,\r\n                      })\r\n                    }\r\n                  />\r\n                </CInputGroup>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <CCol cm={6}>\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupText style={{ width: 205 }}>\r\n                    Repetition penalty - <strong>&nbsp;Float</strong>\r\n                  </CInputGroupText>\r\n                  <CFormInput\r\n                    placeholder=\"repetition_penalty\"\r\n                    type=\"number\"\r\n                    value={\r\n                      generationConfig.repetition_penalty < 0\r\n                        ? 0\r\n                        : generationConfig.repetition_penalty\r\n                    }\r\n                    onChange={(e) =>\r\n                      setGenerationConfig({\r\n                        ...generationConfig,\r\n                        repetition_penalty: parseFloat(e.target.value) || 0,\r\n                      })\r\n                    }\r\n                  />\r\n                </CInputGroup>\r\n              </CCol>\r\n              <CCol cm={6}>\r\n                <CInputGroup className=\"mb-3\">\r\n                  <CInputGroupText style={{ width: 205 }}>\r\n                    Length penalty - <strong>&nbsp;Float</strong>\r\n                  </CInputGroupText>\r\n                  <CFormInput\r\n                    placeholder=\"length_penalty\"\r\n                    type=\"number\"\r\n                    value={\r\n                      generationConfig.length_penalty < 0 ? 0 : generationConfig.length_penalty\r\n                    }\r\n                    onChange={(e) =>\r\n                      setGenerationConfig({\r\n                        ...generationConfig,\r\n                        length_penalty: parseFloat(e.target.value) || 0,\r\n                      })\r\n                    }\r\n                  />\r\n                </CInputGroup>\r\n              </CCol>\r\n            </CRow>\r\n            <div className=\"invalid-feedback d-block\">\r\n              {generationConfig.num_beams !== 1 && 'Multiple beams do not support streaming!'}\r\n            </div>\r\n          </CCardBody>\r\n        </CCard>\r\n\r\n        <div className=\"mb-3\">\r\n          <CFormLabel htmlFor=\"exampleFormControlTextarea1\">\r\n            <strong>Write your prompt </strong>- <small>RequestID: {requestId}</small>\r\n          </CFormLabel>\r\n          <CFormTextarea\r\n            placeholder=\"[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n\"\r\n            disabled={isWaiting || isStreaming || isContinuePrompt}\r\n            value={prompt}\r\n            invalid={!!isError}\r\n            onChange={(e) => setPrompt(e.target.value)}\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows={10}\r\n          ></CFormTextarea>\r\n          <CFormFeedback invalid>\r\n            {isError === 2\r\n              ? 'Aborting might cause some data to be lost, its best to reset after aborting!'\r\n              : 'Error generating a response, check your console'}\r\n          </CFormFeedback>\r\n          {responseTimes.length\r\n            ? responseTimes.map((time, i) => (\r\n                <CBadge\r\n                  key={`badge-${i}-${time}`}\r\n                  color=\"dark\"\r\n                  shape=\"rounded-pill\"\r\n                  className=\"me-2 mt-3\"\r\n                >\r\n                  {time / 1000} s\r\n                </CBadge>\r\n              ))\r\n            : ''}\r\n        </div>\r\n\r\n        <div className=\"mb-3 \">\r\n          <CButton\r\n            color=\"primary\"\r\n            disabled={isWaiting || isStreaming || !prompt}\r\n            onClick={sendPrompt}\r\n          >\r\n            {isStop\r\n              ? 'Stopping...'\r\n              : isWaiting\r\n                ? 'Waiting...'\r\n                : isStreaming\r\n                  ? 'Streaming...'\r\n                  : isContinuePrompt\r\n                    ? 'Continue'\r\n                    : 'Send Prompt'}\r\n          </CButton>\r\n          {isContinuePrompt && !isWaiting && !isStreaming && ' or '}\r\n          {!isWaiting && !isStreaming && isContinuePrompt && (\r\n            <CButton color=\"secondary\" disabled={isWaiting || isStreaming} onClick={resetPrompt}>\r\n              reset\r\n            </CButton>\r\n          )}\r\n          {isWaiting || isStreaming ? (\r\n            <CFormLabel>\r\n              <strong>&nbsp;&nbsp;Segment time:&nbsp;</strong>\r\n              <Timer /> seconds\r\n            </CFormLabel>\r\n          ) : lastResponseTime ? (\r\n            <CFormLabel>\r\n              <strong>&nbsp;&nbsp;Generation:&nbsp;</strong>\r\n              {responseTimes.reduce((total, time) => total + time, 0) / 1000} seconds\r\n            </CFormLabel>\r\n          ) : (\r\n            ''\r\n          )}\r\n          <CButton\r\n            color=\"secondary\"\r\n            className=\"float-end ms-3\"\r\n            disabled={(!isWaiting && !isStreaming) || isStop}\r\n            onClick={() => setIsStop(true)}\r\n          >\r\n            Stop\r\n          </CButton>\r\n          <CButton\r\n            color=\"secondary\"\r\n            className=\"float-end\"\r\n            disabled={!isWaiting && !isStreaming}\r\n            onClick={abortRequest}\r\n          >\r\n            Abort\r\n          </CButton>\r\n          &nbsp;&nbsp;\r\n        </div>\r\n\r\n        <CFormCheck\r\n          style={{ cursor: 'pointer' }}\r\n          checked={autoContinue}\r\n          disabled={isWaiting || isStreaming}\r\n          onChange={(e) => setAutoContinue(e.target.checked)}\r\n          className=\"mt-2\"\r\n          type=\"checkbox\"\r\n          id=\"autoContinueCheck\"\r\n          label={\r\n            <span style={{ cursor: 'pointer' }}>\r\n              Automatically continue prompt generation when didnt reach EOS\r\n            </span>\r\n          }\r\n        />\r\n        <CFormCheck\r\n          style={{ cursor: 'pointer' }}\r\n          checked={isOnlyNewTokens}\r\n          disabled={isWaiting || isStreaming}\r\n          onChange={(e) => setIsOnlyNewTokens(e.target.checked)}\r\n          className=\"mt-2\"\r\n          type=\"checkbox\"\r\n          id=\"onlyNewTokensCheck\"\r\n          label={\r\n            <span style={{ cursor: 'pointer' }}>\r\n              Only return new tokens, if disabled returns response including prompt\r\n            </span>\r\n          }\r\n        />\r\n      </CForm>\r\n\r\n      {response && (\r\n        <CCard className=\"mb-5 \">\r\n          <CCardHeader>\r\n            Response to requestID {requestId}:\r\n            <CButton\r\n              color={rawResponse ? 'info' : 'light'}\r\n              className=\"float-end\"\r\n              onClick={() => setRawResponse(!rawResponse)}\r\n            >\r\n              {rawResponse ? 'View markdown' : 'View raw response'}\r\n            </CButton>\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            {rawResponse ? (\r\n              <span className=\"markdown-llm\">{response}</span>\r\n            ) : (\r\n              <ReactMarkdown components={components} skipHtml className=\"markdown-llm\">\r\n                {response.replace(/ /g, '\\u00a0')}\r\n              </ReactMarkdown>\r\n            )}\r\n          </CCardBody>\r\n        </CCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n"],"names":["seconds","setSeconds","useState","useEffect","timeStart","Date","getTime","interval","setInterval","clearInterval","_jsx","_Fragment","children","API_PATH","concat","process","Dashboard","requestId","setRequestId","uuidv4","prompt","setPrompt","isStop","setIsStop","autoContinue","setAutoContinue","isOnlyNewTokens","setIsOnlyNewTokens","response","setResponse","responseController","setResponseController","lastResponseTime","setLastResponseTime","responseTimes","setResponseTimes","isError","setIsError","isWaiting","setIsWaiting","isStreaming","setIsStreaming","rawResponse","setRawResponse","isContinuePrompt","setIsContinuePrompt","generationConfig","setGenerationConfig","num_beams","do_sample","temperature","top_p","top_k","max_new_tokens","repetition_penalty","length_penalty","theme","useSelector","_ref","window","matchMedia","matches","components","code","_ref2","node","props","SyntaxHighlighter","language","style","atomDark","docco","sendPrompt","async","fullResponse","responseTime","url","postData","onChunk","arguments","length","undefined","onController","start","controller","AbortController","signal","fetch","method","body","JSON","stringify","reader","getReader","done","value","read","TextDecoder","decode","readHttpStream","request_id","only_new_tokens","generation_config","text","status","e","name","console","log","error","isEos","trimEnd","endsWith","_jsxs","CForm","className","CCard","CCardHeader","CCardBody","CRow","CCol","cm","CInputGroup","CInputGroupText","width","CFormInput","placeholder","type","onChange","parseFloat","target","parseInt","CFormCheck","cursor","checked","id","label","CFormLabel","htmlFor","CFormTextarea","disabled","invalid","rows","CFormFeedback","map","time","i","CBadge","color","shape","CButton","onClick","resetPrompt","Timer","reduce","total","abortRequest","abort","ReactMarkdown","skipHtml","replace"],"sourceRoot":""}