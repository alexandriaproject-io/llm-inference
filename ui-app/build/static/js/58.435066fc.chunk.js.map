{"version":3,"file":"static/js/58.435066fc.chunk.js","mappings":"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","sources":["components/GenerationConfig.js","components/PromptResponse.js","components/Timer.js","views/rest-api-single/RestApiDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CFormCheck,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\n\nexport const defaultGenerationConfig = (overrides = {}) => {\n  return {\n    llmConfig: {\n      num_beams: 1,\n      do_sample: true,\n      temperature: 1,\n      top_p: 1,\n      top_k: 50,\n      max_new_tokens: 100,\n      repetition_penalty: 1,\n      length_penalty: 1,\n      ...(overrides.llmConfig || {}),\n    },\n    requestConfig: {\n      onlyNewTokens: true,\n      streamResponse: true,\n      ...(overrides.requestConfig || {}),\n    },\n  }\n}\n\nconst GenerationConfig = ({\n  onChange = () => undefined,\n  showStream = false,\n  defaultConfig = {},\n  config = {},\n}) => {\n  const [stateConfig, setStateConfig] = useState(defaultGenerationConfig(defaultConfig))\n\n  useEffect(() => {\n    setGenerationConfig({})\n  }, [])\n\n  const getLlmConfig = () => ({\n    ...stateConfig.llmConfig,\n    ...(config?.llmConfig || {}),\n  })\n  const getRequestConfig = () => ({\n    ...stateConfig.requestConfig,\n    ...(config?.requestConfig || {}),\n  })\n\n  const setGenerationConfig = (newConfig) => {\n    const updatedConfig = {\n      llmConfig: {\n        ...stateConfig.llmConfig,\n        ...newConfig.llmConfig,\n      },\n      requestConfig: {\n        ...stateConfig.requestConfig,\n        ...newConfig.requestConfig,\n      },\n    }\n    setStateConfig(updatedConfig)\n    onChange(updatedConfig)\n  }\n\n  const setLlmConfig = (llmConfig) => {\n    setGenerationConfig({ llmConfig })\n  }\n\n  const setRequestConfig = (requestConfig) => {\n    setGenerationConfig({ requestConfig })\n  }\n\n  return (\n    <CCard className=\"mb-3 \">\n      <CCardHeader>\n        Generation Config:\n        <CButton\n          color=\"secondary\"\n          size=\"sm\"\n          className=\"float-end\"\n          onClick={() => {\n            const defaults = defaultGenerationConfig(defaultConfig)\n            setStateConfig(defaults)\n            onChange(defaults)\n          }}\n        >\n          reset defaults\n        </CButton>\n      </CCardHeader>\n      <CCardBody>\n        <small>\n          <br />\n        </small>\n        <CRow>\n          <CCol cm={6}>\n            <CInputGroup className=\"mb-3\">\n              <CInputGroupText style={{ width: 205 }}>\n                Temperature - <strong>&nbsp;Float</strong>\n              </CInputGroupText>\n              <CFormInput\n                placeholder=\"temperature\"\n                type=\"number\"\n                value={getLlmConfig().temperature}\n                onChange={(e) => {\n                  const value = parseFloat(e.target.value) || 0\n                  setLlmConfig({ temperature: value < 0 ? 0 : value })\n                }}\n              />\n            </CInputGroup>\n          </CCol>\n          <CCol cm={6}>\n            <CInputGroup className=\"mb-3\">\n              <CInputGroupText style={{ width: 205 }}>\n                Max new Tokens - <strong>&nbsp;Int</strong>\n              </CInputGroupText>\n              <CFormInput\n                placeholder=\"max_new_tokens\"\n                type=\"number\"\n                value={getLlmConfig().max_new_tokens}\n                onChange={(e) => {\n                  const value = parseInt(e.target.value) || 0\n                  setLlmConfig({ max_new_tokens: value < 1 ? 1 : value })\n                }}\n              />\n            </CInputGroup>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol cm={6}>\n            <CInputGroup className=\"mb-3\">\n              <CInputGroupText style={{ width: 205 }}>\n                Number of Beams - <strong>&nbsp;Int</strong>\n              </CInputGroupText>\n              <CFormInput\n                placeholder=\"num_beams\"\n                type=\"number\"\n                value={getLlmConfig().num_beams}\n                onChange={(e) => {\n                  const value = parseInt(e.target.value) || 0\n                  setLlmConfig({ num_beams: value < 1 ? 1 : value })\n                }}\n              />\n            </CInputGroup>\n          </CCol>\n          <CCol cm={6}>\n            <CInputGroup className=\"mb-3\">\n              <CFormCheck\n                style={{ cursor: 'pointer' }}\n                checked={getLlmConfig().do_sample}\n                onChange={(e) => setLlmConfig({ do_sample: !!e.target.checked })}\n                className=\"mt-2\"\n                type=\"checkbox\"\n                id=\"doSample\"\n                label={<span style={{ cursor: 'pointer' }}>Do sample ( Bool )</span>}\n              />\n            </CInputGroup>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol cm={6}>\n            <CInputGroup className=\"mb-3\">\n              <CInputGroupText style={{ width: 205 }}>\n                Top 'P' - <strong>&nbsp;Float</strong>\n              </CInputGroupText>\n              <CFormInput\n                placeholder=\"top_p\"\n                type=\"number\"\n                value={getLlmConfig().top_p}\n                onChange={(e) => {\n                  const value = parseFloat(e.target.value) || 0\n                  setLlmConfig({ top_p: value < 0 ? 0 : value })\n                }}\n              />\n            </CInputGroup>\n          </CCol>\n          <CCol cm={6}>\n            <CInputGroup className=\"mb-3\">\n              <CInputGroupText style={{ width: 205 }}>\n                Top 'K' - <strong>&nbsp;Int</strong>\n              </CInputGroupText>\n              <CFormInput\n                placeholder=\"top_k\"\n                type=\"number\"\n                value={getLlmConfig().top_k}\n                onChange={(e) => {\n                  const value = parseInt(e.target.value) || 0\n                  setLlmConfig({ top_k: value < 0 ? 0 : value })\n                }}\n              />\n            </CInputGroup>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol cm={6}>\n            <CInputGroup className=\"mb-3\">\n              <CInputGroupText style={{ width: 205 }}>\n                Repetition penalty - <strong>&nbsp;Float</strong>\n              </CInputGroupText>\n              <CFormInput\n                placeholder=\"repetition_penalty\"\n                type=\"number\"\n                value={getLlmConfig().repetition_penalty}\n                onChange={(e) => {\n                  const value = parseFloat(e.target.value) || 0\n                  setLlmConfig({ repetition_penalty: value < 0.000001 ? 0.000001 : value })\n                }}\n              />\n            </CInputGroup>\n          </CCol>\n          <CCol cm={6}>\n            <CInputGroup className=\"mb-3\">\n              <CInputGroupText style={{ width: 205 }}>\n                Length penalty - <strong>&nbsp;Float</strong>\n              </CInputGroupText>\n              <CFormInput\n                placeholder=\"length_penalty\"\n                type=\"number\"\n                value={getLlmConfig().length_penalty}\n                onChange={(e) => {\n                  const value = parseFloat(e.target.value) || 0\n                  setLlmConfig({ length_penalty: value < 0 ? 0 : value })\n                }}\n              />\n            </CInputGroup>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol cm={6}>\n            <CFormCheck\n              style={{ cursor: 'pointer' }}\n              checked={getRequestConfig().onlyNewTokens}\n              onChange={(e) => setRequestConfig({ onlyNewTokens: e.target.checked })}\n              className=\"mt-2\"\n              type=\"checkbox\"\n              id=\"onlyNewTokensCheck\"\n              label={\n                <span style={{ cursor: 'pointer' }}>\n                  Only return new tokens ( or include prompt )\n                </span>\n              }\n            />\n          </CCol>\n          <CCol cm={6}>\n            {showStream && (\n              <CFormCheck\n                style={{ cursor: 'pointer' }}\n                checked={getRequestConfig().streamResponse}\n                onChange={(e) => setRequestConfig({ streamResponse: e.target.checked })}\n                className=\"mt-2\"\n                type=\"checkbox\"\n                id=\"isStreamResponse\"\n                label={\n                  <span style={{ cursor: 'pointer' }}>\n                    Stream tokens as they are being generated ( or all at once )\n                  </span>\n                }\n              />\n            )}\n          </CCol>\n        </CRow>\n\n        <div className=\"invalid-feedback d-block\">\n          {getLlmConfig().num_beams !== 1 && 'Multiple beams do not support streaming!'}\n        </div>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nexport default GenerationConfig\n","import React, { useState } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { CButton, CCard, CCardBody, CCardHeader, CCol, CRow } from '@coreui/react'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport atomDark from 'react-syntax-highlighter/dist/cjs/styles/hljs/atom-one-dark'\nimport docco from 'react-syntax-highlighter/dist/cjs/styles/hljs/docco'\nimport { useSelector } from 'react-redux'\n\nconst PromptResponse = ({ requestId, response }) => {\n  const [rawResponse, setRawResponse] = useState(false)\n  const theme = useSelector(({ theme }) => {\n    return theme === 'auto'\n      ? window.matchMedia('(prefers-color-scheme: dark)').matches\n        ? 'dark'\n        : 'light'\n      : theme\n  })\n  const components = {\n    // Custom component for text\n    code: ({ node, ...props }) => {\n      return (\n        <span>\n          <SyntaxHighlighter language={props.language} style={theme === 'dark' ? atomDark : docco}>\n            {props.children}\n          </SyntaxHighlighter>\n        </span>\n      )\n    },\n  }\n  return (\n    <CCard className=\"mb-5 \">\n      <CCardHeader>\n        <CRow>\n          <CCol sm={8}>\n            <div>Response to requestID:</div>\n            <small>{requestId}</small>\n          </CCol>\n          <CCol sm={4}>\n            <CButton\n              size=\"sm\"\n              color={rawResponse ? 'info' : 'light'}\n              className=\"float-end mt-2\"\n              onClick={() => setRawResponse(!rawResponse)}\n            >\n              {rawResponse ? 'View markdown' : 'View raw response'}\n            </CButton>\n          </CCol>\n        </CRow>\n      </CCardHeader>\n      <CCardBody>\n        {rawResponse ? (\n          <span className=\"markdown-llm\">{response}</span>\n        ) : (\n          <ReactMarkdown components={components} skipHtml className=\"markdown-llm\">\n            {response.replace(/ /g, '\\u00a0')}\n          </ReactMarkdown>\n        )}\n      </CCardBody>\n    </CCard>\n  )\n}\n\nexport default PromptResponse\n","import React, { useState, useEffect } from 'react'\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const timeStart = new Date().getTime()\r\n    const interval = setInterval(() => {\r\n      setSeconds((seconds) => new Date().getTime() - timeStart)\r\n    }, 99)\r\n\r\n    // Clear interval on component unmount\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <>{(seconds / 1000).toFixed(3)}</>\r\n}\r\n\r\nexport default Timer\r\n","import React, { useEffect, useState } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CForm,\n  CFormCheck,\n  CFormFeedback,\n  CFormLabel,\n  CFormTextarea,\n} from '@coreui/react'\nimport Timer from '../../components/Timer'\nimport { v4 as uuidv4 } from 'uuid'\nimport GenerationConfig from '../../components/GenerationConfig'\nimport PromptResponse from '../../components/PromptResponse'\n\nconst API_PATH = `${process.env.REACT_APP_BASE_URL || ''}/api/generate-one`\n\nasync function readHttpStream(\n  url,\n  postData,\n  onChunk = () => undefined,\n  onController = () => undefined,\n) {\n  const start = new Date().getTime()\n  const controller = new AbortController()\n  const signal = controller.signal\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(postData), // Convert the JavaScript object to a JSON string\n    signal,\n  })\n  onController(controller)\n  const reader = response.body.getReader()\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) break\n    onChunk(new TextDecoder().decode(value))\n  }\n  return {\n    response,\n    responseTime: new Date().getTime() - start,\n  }\n}\n\nfunction replaceStringAtEnd(str, search, replace) {\n  if (str.endsWith(search)) {\n    return str.slice(0, -search.length) + replace\n  }\n  return str\n}\n\nconst Dashboard = () => {\n  const [requestId, setRequestId] = useState(uuidv4())\n  const [prompt, setPrompt] = useState(\n    '[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n',\n  )\n  const [isStop, setIsStop] = useState(false)\n  const [autoContinue, setAutoContinue] = useState(false)\n  const [autoScroll, setAutoScroll] = useState(true)\n  const [response, setResponse] = useState(``)\n  const [responseController, setResponseController] = useState(null)\n  const [lastResponseTime, setLastResponseTime] = useState(0)\n  const [responseTimes, setResponseTimes] = useState([])\n  const [isError, setIsError] = useState(0)\n  const [errorText, setErrorText] = useState('')\n  const [isWaiting, setIsWaiting] = useState(false)\n  const [isStreaming, setIsStreaming] = useState(false)\n  const [isContinuePrompt, setIsContinuePrompt] = useState(false)\n  const [generationConfig, setGenerationConfig] = useState({})\n\n  useEffect(() => {\n    if (autoContinue && isContinuePrompt && !isStreaming && !isWaiting && !isStop && !isError) {\n      sendPrompt() // need to allow the states to update before continuing\n    } else {\n      setIsStop(false)\n    }\n  }, [lastResponseTime])\n  const sendPrompt = async (scrollToText) => {\n    if (isContinuePrompt) {\n      window.scrollLock = scrollToText ?? window.scrollLock\n    } else {\n      setResponse('')\n      window.setTimeout(() => (window.scrollLock = scrollToText ?? window.scrollLock), 250)\n    }\n    setIsWaiting(true)\n    setIsStreaming(false)\n    setIsStop(false)\n    setErrorText('')\n    setIsError(0)\n    setLastResponseTime(0)\n\n    let fullResponse = ''\n    if (!isContinuePrompt) {\n      setResponseTimes([])\n    } else {\n      fullResponse = generationConfig?.requestConfig?.onlyNewTokens ? response : ''\n    }\n    let lastStreamChunk = ''\n    try {\n      const { responseTime, response } = await readHttpStream(\n        API_PATH,\n        {\n          request_id: requestId,\n          prompt: prompt,\n          only_new_tokens: !!generationConfig?.requestConfig?.onlyNewTokens,\n          stream_response: !!generationConfig?.requestConfig?.streamResponse,\n          generation_config: generationConfig.llmConfig,\n        },\n        (text) => {\n          lastStreamChunk = text\n          fullResponse += text\n          setIsWaiting(false)\n          setIsStreaming(true)\n          setResponse(fullResponse)\n        },\n        (controller) => setResponseController(controller),\n      )\n      if (response.status !== 200) {\n        setIsError(1)\n        window.scrollLock = false\n        autoScroll && window.scrollTo(0, 0)\n        setResponse(replaceStringAtEnd(fullResponse, lastStreamChunk, ''))\n        setErrorText(lastStreamChunk)\n      } else {\n        if (!isContinuePrompt) {\n          setResponseTimes([responseTime])\n        } else {\n          setResponseTimes([...responseTimes, responseTime])\n        }\n      }\n\n      setLastResponseTime(responseTime)\n    } catch (e) {\n      if (e.name === 'AbortError') {\n        setIsError(2)\n      } else {\n        console.error(e)\n        setIsError(1)\n        window.scrollLock = false\n        autoScroll && window.scrollTo(0, 0)\n        setResponse(replaceStringAtEnd(fullResponse, lastStreamChunk, ''))\n        setErrorText(lastStreamChunk)\n      }\n\n      setResponseController(null)\n      setIsWaiting(false)\n      setIsStreaming(false)\n      setIsStop(false)\n    } finally {\n      setResponseController(null)\n      setIsWaiting(false)\n      setIsStreaming(false)\n      const isEos = fullResponse.trimEnd().endsWith('</s>')\n      setIsContinuePrompt(!isEos)\n      if (isEos) {\n        setIsStop(false)\n      }\n    }\n  }\n\n  const abortRequest = () => {\n    setIsStop(true)\n    if (responseController) {\n      responseController.abort()\n    }\n  }\n  const resetPrompt = () => {\n    setRequestId(uuidv4())\n    setIsStop(false)\n    setResponse('')\n    setResponseController(null)\n    setLastResponseTime(0)\n    setResponseTimes([])\n    setIsError(0)\n    setErrorText('')\n    setIsWaiting(false)\n    setIsStreaming(false)\n    setIsContinuePrompt(false)\n  }\n\n  return (\n    <>\n      <CForm className=\"pb-5\">\n        <GenerationConfig\n          config={generationConfig}\n          onChange={(newConfig) => setGenerationConfig(newConfig)}\n          showStream\n        />\n\n        <div className=\"mb-3\">\n          <CFormLabel htmlFor=\"exampleFormControlTextarea1\">\n            <strong>Write your prompt </strong>- <small>RequestID: {requestId}</small>\n          </CFormLabel>\n          <CFormTextarea\n            placeholder=\"[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n\"\n            disabled={isWaiting || isStreaming || isContinuePrompt}\n            value={prompt}\n            invalid={!!isError}\n            onChange={(e) => setPrompt(e.target.value)}\n            id=\"exampleFormControlTextarea1\"\n            rows={10}\n          ></CFormTextarea>\n          <CFormFeedback invalid>\n            {isError === 2\n              ? 'Aborting might cause some data to be lost, its best to reset after aborting!'\n              : errorText || 'Error generating a response, check your console'}\n          </CFormFeedback>\n        </div>\n\n        {responseTimes.length ? (\n          <CFormLabel htmlFor=\"exampleFormControlTextarea1\">\n            <strong>Response time history: </strong>\n          </CFormLabel>\n        ) : (\n          ''\n        )}\n        <div className=\"pb-3\" style={{ overflow: 'auto', whiteSpace: 'nowrap' }}>\n          {responseTimes.length\n            ? responseTimes.map((time, i) => (\n                <CBadge\n                  key={`badge-${i}-${time}`}\n                  color=\"dark\"\n                  shape=\"rounded-pill\"\n                  className=\"me-2\"\n                >\n                  {(time / 1000).toFixed(3)} s\n                </CBadge>\n              ))\n            : ''}\n        </div>\n\n        <div className=\"mb-3 \">\n          <CButton\n            color=\"primary\"\n            disabled={isWaiting || isStreaming || !prompt}\n            onClick={() => sendPrompt(autoScroll)}\n          >\n            {isStop && (isWaiting || isStreaming)\n              ? 'Stopping...'\n              : isWaiting\n                ? 'Waiting...'\n                : isStreaming\n                  ? 'Streaming...'\n                  : isContinuePrompt\n                    ? 'Continue'\n                    : 'Send Prompt'}\n          </CButton>\n          {isContinuePrompt && !isWaiting && !isStreaming && ' or '}\n          {!isWaiting && !isStreaming && isContinuePrompt && (\n            <CButton color=\"secondary\" disabled={isWaiting || isStreaming} onClick={resetPrompt}>\n              reset\n            </CButton>\n          )}\n          {isWaiting || isStreaming ? (\n            <CFormLabel>\n              <strong>&nbsp;&nbsp;Segment time:&nbsp;</strong>\n              <Timer /> seconds\n            </CFormLabel>\n          ) : lastResponseTime ? (\n            <CFormLabel>\n              <strong>&nbsp;&nbsp;Generation:&nbsp;</strong>\n              {responseTimes.reduce((total, time) => total + time, 0) / 1000} seconds\n            </CFormLabel>\n          ) : (\n            ''\n          )}\n          <CButton\n            color=\"secondary\"\n            className=\"float-end ms-3\"\n            disabled={!autoContinue}\n            onClick={() => setIsStop(true)}\n          >\n            Stop\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            className=\"float-end\"\n            disabled={!isWaiting && !isStreaming}\n            onClick={abortRequest}\n          >\n            Abort\n          </CButton>\n          &nbsp;&nbsp;\n        </div>\n        <CFormCheck\n          style={{ cursor: 'pointer' }}\n          checked={autoScroll}\n          onChange={(e) => setAutoScroll(e.target.checked)}\n          className=\"mt-2\"\n          type=\"checkbox\"\n          id=\"setAutoScroll\"\n          label={\n            <span style={{ cursor: 'pointer' }}>Auto scroll to follow the generated response</span>\n          }\n        />\n        <CFormCheck\n          style={{ cursor: 'pointer' }}\n          checked={autoContinue}\n          disabled={isWaiting || isStreaming}\n          onChange={(e) => setAutoContinue(e.target.checked)}\n          className=\"mt-2\"\n          type=\"checkbox\"\n          id=\"autoContinueCheck\"\n          label={\n            <span style={{ cursor: 'pointer' }}>\n              Automatically continue prompt generation when didnt reach EOS\n            </span>\n          }\n        />\n      </CForm>\n\n      {response && <PromptResponse requestId={requestId} response={response} />}\n    </>\n  )\n}\n\nexport default Dashboard\n"],"names":["defaultGenerationConfig","overrides","arguments","length","undefined","llmConfig","num_beams","do_sample","temperature","top_p","top_k","max_new_tokens","repetition_penalty","length_penalty","requestConfig","onlyNewTokens","streamResponse","_ref","onChange","showStream","defaultConfig","config","stateConfig","setStateConfig","useState","useEffect","setGenerationConfig","getLlmConfig","getRequestConfig","newConfig","updatedConfig","setLlmConfig","setRequestConfig","_jsxs","CCard","className","children","CCardHeader","_jsx","CButton","color","size","onClick","defaults","CCardBody","CRow","CCol","cm","CInputGroup","CInputGroupText","style","width","CFormInput","placeholder","type","value","e","parseFloat","target","parseInt","CFormCheck","cursor","checked","id","label","requestId","response","rawResponse","setRawResponse","theme","useSelector","_ref2","window","matchMedia","matches","components","code","_ref3","node","props","SyntaxHighlighter","language","atomDark","docco","sm","ReactMarkdown","skipHtml","replace","seconds","setSeconds","timeStart","Date","getTime","interval","setInterval","clearInterval","_Fragment","toFixed","API_PATH","concat","process","REACT_APP_BASE_URL","replaceStringAtEnd","str","search","endsWith","slice","Dashboard","setRequestId","uuidv4","prompt","setPrompt","isStop","setIsStop","autoContinue","setAutoContinue","autoScroll","setAutoScroll","setResponse","responseController","setResponseController","lastResponseTime","setLastResponseTime","responseTimes","setResponseTimes","isError","setIsError","errorText","setErrorText","isWaiting","setIsWaiting","isStreaming","setIsStreaming","isContinuePrompt","setIsContinuePrompt","generationConfig","sendPrompt","async","scrollLock","scrollToText","setTimeout","fullResponse","_generationConfig$req","lastStreamChunk","_generationConfig$req2","_generationConfig$req3","responseTime","url","postData","onChunk","onController","start","controller","AbortController","signal","fetch","method","body","JSON","stringify","reader","getReader","done","read","TextDecoder","decode","readHttpStream","request_id","only_new_tokens","stream_response","generation_config","text","status","scrollTo","name","console","error","isEos","trimEnd","CForm","GenerationConfig","CFormLabel","htmlFor","CFormTextarea","disabled","invalid","rows","CFormFeedback","overflow","whiteSpace","map","time","i","CBadge","shape","resetPrompt","Timer","reduce","total","abortRequest","abort","PromptResponse"],"sourceRoot":""}