{"version":3,"file":"static/js/184.479d9172.chunk.js","mappings":"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","sources":["components/Timer.js","views/rest-api-single/RestApiDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const timeStart = new Date().getTime()\r\n    const interval = setInterval(() => {\r\n      setSeconds((seconds) => new Date().getTime() - timeStart)\r\n    }, 99)\r\n\r\n    // Clear interval on component unmount\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <>{seconds / 1000}</>\r\n}\r\n\r\nexport default Timer\r\n","import React, { useEffect, useState } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormFeedback,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport Timer from '../../components/Timer'\nimport { v4 as uuidv4 } from 'uuid'\nimport ReactMarkdown from 'react-markdown'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport docco from 'react-syntax-highlighter/dist/esm/styles/hljs/docco'\nimport atomDark from 'react-syntax-highlighter/dist/esm/styles/hljs/atom-one-dark'\nimport { useSelector } from 'react-redux'\n\nconst API_PATH = `${process.env.REACT_APP_BASE_URL || ''}/api/generate-one`\n\nasync function readHttpStream(\n  url,\n  postData,\n  onChunk = () => undefined,\n  onController = () => undefined,\n) {\n  const start = new Date().getTime()\n  const controller = new AbortController()\n  const signal = controller.signal\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(postData), // Convert the JavaScript object to a JSON string\n    signal,\n  })\n  onController(controller)\n  const reader = response.body.getReader()\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) break\n    onChunk(new TextDecoder().decode(value))\n  }\n  return {\n    response,\n    responseTime: new Date().getTime() - start,\n  }\n}\n\nfunction replaceStringAtEnd(str, search, replace) {\n  if (str.endsWith(search)) {\n    return str.slice(0, -search.length) + replace\n  }\n  return str\n}\n\nconst defaultGenerationConfig = () => {\n  return {\n    num_beams: 1,\n    do_sample: false,\n    temperature: 1,\n    top_p: 1,\n    top_k: 50,\n    max_new_tokens: 100,\n    repetition_penalty: 1,\n    length_penalty: 1,\n  }\n}\nconst Dashboard = () => {\n  const [requestId, setRequestId] = useState(uuidv4())\n  const [prompt, setPrompt] = useState(\n    '[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n',\n  )\n  const [isStop, setIsStop] = useState(false)\n  const [autoContinue, setAutoContinue] = useState(false)\n  const [isOnlyNewTokens, setIsOnlyNewTokens] = useState(true)\n  const [response, setResponse] = useState(``)\n  const [responseController, setResponseController] = useState(null)\n  const [lastResponseTime, setLastResponseTime] = useState(0)\n  const [responseTimes, setResponseTimes] = useState([])\n  const [isError, setIsError] = useState(0)\n  const [errorText, setErrorText] = useState('')\n  const [isWaiting, setIsWaiting] = useState(false)\n  const [isStreaming, setIsStreaming] = useState(false)\n  const [rawResponse, setRawResponse] = useState(false)\n  const [isContinuePrompt, setIsContinuePrompt] = useState(false)\n  const [generationConfig, setGenerationConfig] = useState(defaultGenerationConfig())\n  const theme = useSelector(({ theme }) => {\n    return theme === 'auto'\n      ? window.matchMedia('(prefers-color-scheme: dark)').matches\n        ? 'dark'\n        : 'light'\n      : theme\n  })\n\n  const components = {\n    // Custom component for text\n    code: ({ node, ...props }) => {\n      return (\n        <span>\n          <SyntaxHighlighter language={props.language} style={theme === 'dark' ? atomDark : docco}>\n            {props.children}\n          </SyntaxHighlighter>\n        </span>\n      )\n    },\n  }\n\n  useEffect(() => {\n    if (autoContinue && isContinuePrompt && !isStreaming && !isWaiting && !isStop && !isError) {\n      sendPrompt() // need to allow the states to update before continuing\n    } else {\n      setIsStop(false)\n    }\n  }, [lastResponseTime])\n  const sendPrompt = async () => {\n    setIsWaiting(true)\n    setIsStreaming(false)\n    setIsStop(false)\n    setErrorText('')\n    setIsError(0)\n    setLastResponseTime(0)\n\n    let fullResponse = ''\n    if (!isContinuePrompt) {\n      setResponseTimes([])\n    } else {\n      fullResponse = isOnlyNewTokens ? response : ''\n    }\n    let lastStreamChunk = ''\n    try {\n      const { responseTime, response } = await readHttpStream(\n        API_PATH,\n        {\n          request_id: requestId,\n          prompt: prompt,\n          only_new_tokens: isOnlyNewTokens,\n          generation_config: generationConfig,\n        },\n        (text) => {\n          lastStreamChunk = text\n          fullResponse += text\n          setIsWaiting(false)\n          setIsStreaming(true)\n          setResponse(fullResponse)\n        },\n        (controller) => setResponseController(controller),\n      )\n      if (response.status !== 200) {\n        setIsError(1)\n        setResponse(replaceStringAtEnd(fullResponse, lastStreamChunk, ''))\n        setErrorText(lastStreamChunk)\n      } else {\n        if (!isContinuePrompt) {\n          setResponseTimes([responseTime])\n        } else {\n          setResponseTimes([...responseTimes, responseTime])\n        }\n      }\n\n      setLastResponseTime(responseTime)\n    } catch (e) {\n      if (e.name === 'AbortError') {\n        console.log('Aborting')\n        setIsError(2)\n      } else {\n        console.error(e)\n        setIsError(1)\n        setResponse(replaceStringAtEnd(fullResponse, lastStreamChunk, ''))\n        setErrorText(lastStreamChunk)\n      }\n\n      setResponseController(null)\n      setIsWaiting(false)\n      setIsStreaming(false)\n      setIsStop(false)\n    } finally {\n      setResponseController(null)\n      setIsWaiting(false)\n      setIsStreaming(false)\n      const isEos = fullResponse.trimEnd().endsWith('</s>')\n      setIsContinuePrompt(!isEos)\n      if (isEos) {\n        setIsStop(false)\n      }\n    }\n  }\n\n  const abortRequest = () => {\n    setIsStop(true)\n    console.log(responseController)\n    if (responseController) {\n      responseController.abort()\n    }\n  }\n  const resetPrompt = () => {\n    setRequestId(uuidv4())\n    setIsStop(false)\n    setResponse('')\n    setResponseController(null)\n    setLastResponseTime(0)\n    setResponseTimes([])\n    setIsError(0)\n    setErrorText('')\n    setIsWaiting(false)\n    setIsStreaming(false)\n    setIsContinuePrompt(false)\n  }\n\n  return (\n    <>\n      <CForm className=\"pb-3\">\n        <CCard className=\"mb-3 \">\n          <CCardHeader>\n            Generation Config:\n            <CButton\n              color=\"secondary\"\n              size=\"sm\"\n              className=\"float-end\"\n              onClick={() => setGenerationConfig(defaultGenerationConfig())}\n            >\n              reset defaults\n            </CButton>\n          </CCardHeader>\n          <CCardBody>\n            <small>\n              <br />\n            </small>\n            <CRow>\n              <CCol cm={6}>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText style={{ width: 205 }}>\n                    Temperature - <strong>&nbsp;Float</strong>\n                  </CInputGroupText>\n                  <CFormInput\n                    placeholder=\"temperature\"\n                    type=\"number\"\n                    value={generationConfig.temperature}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      setGenerationConfig({\n                        ...generationConfig,\n                        temperature: value < 0 ? 0 : value,\n                      })\n                    }}\n                  />\n                </CInputGroup>\n              </CCol>\n              <CCol cm={6}>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText style={{ width: 205 }}>\n                    Max new Tokens - <strong>&nbsp;Int</strong>\n                  </CInputGroupText>\n                  <CFormInput\n                    placeholder=\"max_new_tokens\"\n                    type=\"number\"\n                    value={generationConfig.max_new_tokens}\n                    onChange={(e) => {\n                      const value = parseInt(e.target.value) || 0\n                      setGenerationConfig({\n                        ...generationConfig,\n                        max_new_tokens: value < 1 ? 1 : value,\n                      })\n                    }}\n                  />\n                </CInputGroup>\n              </CCol>\n            </CRow>\n            <CRow>\n              <CCol cm={6}>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText style={{ width: 205 }}>\n                    Number of Beams - <strong>&nbsp;Int</strong>\n                  </CInputGroupText>\n                  <CFormInput\n                    placeholder=\"num_beams\"\n                    type=\"number\"\n                    value={generationConfig.num_beams}\n                    onChange={(e) => {\n                      const value = parseInt(e.target.value) || 0\n                      setGenerationConfig({\n                        ...generationConfig,\n                        num_beams: value < 1 ? 1 : value,\n                      })\n                    }}\n                  />\n                </CInputGroup>\n              </CCol>\n              <CCol cm={6}>\n                <CInputGroup className=\"mb-3\">\n                  <CFormCheck\n                    style={{ cursor: 'pointer' }}\n                    checked={generationConfig.do_sample}\n                    onChange={(e) =>\n                      setGenerationConfig({\n                        ...generationConfig,\n                        do_sample: !!e.target.checked,\n                      })\n                    }\n                    className=\"mt-2\"\n                    type=\"checkbox\"\n                    id=\"doSample\"\n                    label={<span style={{ cursor: 'pointer' }}>Do sample ( Bool )</span>}\n                  />\n                </CInputGroup>\n              </CCol>\n            </CRow>\n            <CRow>\n              <CCol cm={6}>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText style={{ width: 205 }}>\n                    Top 'P' - <strong>&nbsp;Float</strong>\n                  </CInputGroupText>\n                  <CFormInput\n                    placeholder=\"top_p\"\n                    type=\"number\"\n                    value={generationConfig.top_p}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      setGenerationConfig({\n                        ...generationConfig,\n                        top_p: value < 0 ? 0 : value,\n                      })\n                    }}\n                  />\n                </CInputGroup>\n              </CCol>\n              <CCol cm={6}>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText style={{ width: 205 }}>\n                    Top 'K' - <strong>&nbsp;Int</strong>\n                  </CInputGroupText>\n                  <CFormInput\n                    placeholder=\"top_k\"\n                    type=\"number\"\n                    value={generationConfig.top_k}\n                    onChange={(e) => {\n                      const value = parseInt(e.target.value) || 0\n                      setGenerationConfig({\n                        ...generationConfig,\n                        top_k: value < 0 ? 0 : value,\n                      })\n                    }}\n                  />\n                </CInputGroup>\n              </CCol>\n            </CRow>\n            <CRow>\n              <CCol cm={6}>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText style={{ width: 205 }}>\n                    Repetition penalty - <strong>&nbsp;Float</strong>\n                  </CInputGroupText>\n                  <CFormInput\n                    placeholder=\"repetition_penalty\"\n                    type=\"number\"\n                    value={generationConfig.repetition_penalty}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      setGenerationConfig({\n                        ...generationConfig,\n                        repetition_penalty: value < 0.000001 ? 0.000001 : value,\n                      })\n                    }}\n                  />\n                </CInputGroup>\n              </CCol>\n              <CCol cm={6}>\n                <CInputGroup className=\"mb-3\">\n                  <CInputGroupText style={{ width: 205 }}>\n                    Length penalty - <strong>&nbsp;Float</strong>\n                  </CInputGroupText>\n                  <CFormInput\n                    placeholder=\"length_penalty\"\n                    type=\"number\"\n                    value={generationConfig.length_penalty}\n                    onChange={(e) => {\n                      const value = parseFloat(e.target.value) || 0\n                      setGenerationConfig({\n                        ...generationConfig,\n                        length_penalty: value < 0 ? 0 : value,\n                      })\n                    }}\n                  />\n                </CInputGroup>\n              </CCol>\n            </CRow>\n            <div className=\"invalid-feedback d-block\">\n              {generationConfig.num_beams !== 1 && 'Multiple beams do not support streaming!'}\n            </div>\n          </CCardBody>\n        </CCard>\n\n        <div className=\"mb-3\">\n          <CFormLabel htmlFor=\"exampleFormControlTextarea1\">\n            <strong>Write your prompt </strong>- <small>RequestID: {requestId}</small>\n          </CFormLabel>\n          <CFormTextarea\n            placeholder=\"[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n\"\n            disabled={isWaiting || isStreaming || isContinuePrompt}\n            value={prompt}\n            invalid={!!isError}\n            onChange={(e) => setPrompt(e.target.value)}\n            id=\"exampleFormControlTextarea1\"\n            rows={10}\n          ></CFormTextarea>\n          <CFormFeedback invalid>\n            {isError === 2\n              ? 'Aborting might cause some data to be lost, its best to reset after aborting!'\n              : errorText || 'Error generating a response, check your console'}\n          </CFormFeedback>\n          {responseTimes.length\n            ? responseTimes.map((time, i) => (\n                <CBadge\n                  key={`badge-${i}-${time}`}\n                  color=\"dark\"\n                  shape=\"rounded-pill\"\n                  className=\"me-2 mt-3\"\n                >\n                  {time / 1000} s\n                </CBadge>\n              ))\n            : ''}\n        </div>\n\n        <div className=\"mb-3 \">\n          <CButton\n            color=\"primary\"\n            disabled={isWaiting || isStreaming || !prompt}\n            onClick={sendPrompt}\n          >\n            {isStop\n              ? 'Stopping...'\n              : isWaiting\n                ? 'Waiting...'\n                : isStreaming\n                  ? 'Streaming...'\n                  : isContinuePrompt\n                    ? 'Continue'\n                    : 'Send Prompt'}\n          </CButton>\n          {isContinuePrompt && !isWaiting && !isStreaming && ' or '}\n          {!isWaiting && !isStreaming && isContinuePrompt && (\n            <CButton color=\"secondary\" disabled={isWaiting || isStreaming} onClick={resetPrompt}>\n              reset\n            </CButton>\n          )}\n          {isWaiting || isStreaming ? (\n            <CFormLabel>\n              <strong>&nbsp;&nbsp;Segment time:&nbsp;</strong>\n              <Timer /> seconds\n            </CFormLabel>\n          ) : lastResponseTime ? (\n            <CFormLabel>\n              <strong>&nbsp;&nbsp;Generation:&nbsp;</strong>\n              {responseTimes.reduce((total, time) => total + time, 0) / 1000} seconds\n            </CFormLabel>\n          ) : (\n            ''\n          )}\n          <CButton\n            color=\"secondary\"\n            className=\"float-end ms-3\"\n            disabled={(!isWaiting && !isStreaming) || isStop}\n            onClick={() => setIsStop(true)}\n          >\n            Stop\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            className=\"float-end\"\n            disabled={!isWaiting && !isStreaming}\n            onClick={abortRequest}\n          >\n            Abort\n          </CButton>\n          &nbsp;&nbsp;\n        </div>\n\n        <CFormCheck\n          style={{ cursor: 'pointer' }}\n          checked={autoContinue}\n          disabled={isWaiting || isStreaming}\n          onChange={(e) => setAutoContinue(e.target.checked)}\n          className=\"mt-2\"\n          type=\"checkbox\"\n          id=\"autoContinueCheck\"\n          label={\n            <span style={{ cursor: 'pointer' }}>\n              Automatically continue prompt generation when didnt reach EOS\n            </span>\n          }\n        />\n        <CFormCheck\n          style={{ cursor: 'pointer' }}\n          checked={isOnlyNewTokens}\n          disabled={isWaiting || isStreaming}\n          onChange={(e) => setIsOnlyNewTokens(e.target.checked)}\n          className=\"mt-2\"\n          type=\"checkbox\"\n          id=\"onlyNewTokensCheck\"\n          label={\n            <span style={{ cursor: 'pointer' }}>\n              Only return new tokens, if disabled returns response including prompt\n            </span>\n          }\n        />\n      </CForm>\n\n      {response && (\n        <CCard className=\"mb-5 \">\n          <CCardHeader>\n            Response to requestID {requestId}:\n            <CButton\n              color={rawResponse ? 'info' : 'light'}\n              className=\"float-end\"\n              onClick={() => setRawResponse(!rawResponse)}\n            >\n              {rawResponse ? 'View markdown' : 'View raw response'}\n            </CButton>\n          </CCardHeader>\n          <CCardBody>\n            {rawResponse ? (\n              <span className=\"markdown-llm\">{response}</span>\n            ) : (\n              <ReactMarkdown components={components} skipHtml className=\"markdown-llm\">\n                {response.replace(/ /g, '\\u00a0')}\n              </ReactMarkdown>\n            )}\n          </CCardBody>\n        </CCard>\n      )}\n    </>\n  )\n}\n\nexport default Dashboard\n"],"names":["seconds","setSeconds","useState","useEffect","timeStart","Date","getTime","interval","setInterval","clearInterval","_jsx","_Fragment","children","API_PATH","concat","process","REACT_APP_BASE_URL","replaceStringAtEnd","str","search","replace","endsWith","slice","length","Dashboard","requestId","setRequestId","uuidv4","prompt","setPrompt","isStop","setIsStop","autoContinue","setAutoContinue","isOnlyNewTokens","setIsOnlyNewTokens","response","setResponse","responseController","setResponseController","lastResponseTime","setLastResponseTime","responseTimes","setResponseTimes","isError","setIsError","errorText","setErrorText","isWaiting","setIsWaiting","isStreaming","setIsStreaming","rawResponse","setRawResponse","isContinuePrompt","setIsContinuePrompt","generationConfig","setGenerationConfig","num_beams","do_sample","temperature","top_p","top_k","max_new_tokens","repetition_penalty","length_penalty","theme","useSelector","_ref","window","matchMedia","matches","components","code","_ref2","node","props","SyntaxHighlighter","language","style","atomDark","docco","sendPrompt","async","fullResponse","lastStreamChunk","responseTime","url","postData","onChunk","arguments","undefined","onController","start","controller","AbortController","signal","fetch","method","body","JSON","stringify","reader","getReader","done","value","read","TextDecoder","decode","readHttpStream","request_id","only_new_tokens","generation_config","text","status","e","name","console","log","error","isEos","trimEnd","_jsxs","CForm","className","CCard","CCardHeader","CButton","color","size","onClick","CCardBody","CRow","CCol","cm","CInputGroup","CInputGroupText","width","CFormInput","placeholder","type","onChange","parseFloat","target","parseInt","CFormCheck","cursor","checked","id","label","CFormLabel","htmlFor","CFormTextarea","disabled","invalid","rows","CFormFeedback","map","time","i","CBadge","shape","resetPrompt","Timer","reduce","total","abortRequest","abort","ReactMarkdown","skipHtml"],"sourceRoot":""}