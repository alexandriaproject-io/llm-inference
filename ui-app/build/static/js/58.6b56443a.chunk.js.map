{"version":3,"file":"static/js/58.6b56443a.chunk.js","mappings":"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","sources":["components/GenerationConfig.js","components/PromptResponse.js","components/ResponseTimes.js","components/Timer.js","views/rest-api-single/RestApiDashboard.js","../node_modules/@coreui/react/src/components/form/CForm.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormCheck,\r\n  CFormInput,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n} from '@coreui/react'\r\n\r\nexport const defaultGenerationConfig = (overrides = {}) => {\r\n  return {\r\n    llmConfig: {\r\n      num_beams: 1,\r\n      do_sample: true,\r\n      temperature: 1,\r\n      top_p: 1,\r\n      top_k: 50,\r\n      max_new_tokens: 100,\r\n      repetition_penalty: 1,\r\n      length_penalty: 1,\r\n      ...(overrides.llmConfig || {}),\r\n    },\r\n    requestConfig: {\r\n      onlyNewTokens: true,\r\n      streamResponse: true,\r\n      ...(overrides.requestConfig || {}),\r\n    },\r\n  }\r\n}\r\n\r\nconst GenerationConfig = ({\r\n  onChange = () => undefined,\r\n  showStream = false,\r\n  defaultConfig = {},\r\n  config = {},\r\n}) => {\r\n  const [stateConfig, setStateConfig] = useState(defaultGenerationConfig(defaultConfig))\r\n\r\n  useEffect(() => {\r\n    setGenerationConfig({})\r\n  }, [])\r\n\r\n  const getLlmConfig = () => ({\r\n    ...stateConfig.llmConfig,\r\n    ...(config?.llmConfig || {}),\r\n  })\r\n  const getRequestConfig = () => ({\r\n    ...stateConfig.requestConfig,\r\n    ...(config?.requestConfig || {}),\r\n  })\r\n\r\n  const setGenerationConfig = (newConfig) => {\r\n    const updatedConfig = {\r\n      llmConfig: {\r\n        ...stateConfig.llmConfig,\r\n        ...newConfig.llmConfig,\r\n      },\r\n      requestConfig: {\r\n        ...stateConfig.requestConfig,\r\n        ...newConfig.requestConfig,\r\n      },\r\n    }\r\n    setStateConfig(updatedConfig)\r\n    onChange(updatedConfig)\r\n  }\r\n\r\n  const setLlmConfig = (llmConfig) => {\r\n    setGenerationConfig({ llmConfig })\r\n  }\r\n\r\n  const setRequestConfig = (requestConfig) => {\r\n    setGenerationConfig({ requestConfig })\r\n  }\r\n\r\n  return (\r\n    <CCard className=\"mb-3 \">\r\n      <CCardHeader>\r\n        Generation Config:\r\n        <CButton\r\n          color=\"secondary\"\r\n          size=\"sm\"\r\n          className=\"float-end\"\r\n          onClick={() => {\r\n            const defaults = defaultGenerationConfig(defaultConfig)\r\n            setStateConfig(defaults)\r\n            onChange(defaults)\r\n          }}\r\n        >\r\n          reset defaults\r\n        </CButton>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <small>\r\n          <br />\r\n        </small>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Temperature - <strong>&nbsp;Float</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"temperature\"\r\n                type=\"number\"\r\n                value={getLlmConfig().temperature}\r\n                onChange={(e) => {\r\n                  const value = parseFloat(e.target.value) || 0\r\n                  setLlmConfig({ temperature: value < 0 ? 0 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Max new Tokens - <strong>&nbsp;Int</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"max_new_tokens\"\r\n                type=\"number\"\r\n                value={getLlmConfig().max_new_tokens}\r\n                onChange={(e) => {\r\n                  const value = parseInt(e.target.value) || 0\r\n                  setLlmConfig({ max_new_tokens: value < 1 ? 1 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Number of Beams - <strong>&nbsp;Int</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"num_beams\"\r\n                type=\"number\"\r\n                value={getLlmConfig().num_beams}\r\n                onChange={(e) => {\r\n                  const value = parseInt(e.target.value) || 0\r\n                  setLlmConfig({ num_beams: value < 1 ? 1 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CFormCheck\r\n                style={{ cursor: 'pointer' }}\r\n                checked={getLlmConfig().do_sample}\r\n                onChange={(e) => setLlmConfig({ do_sample: !!e.target.checked })}\r\n                className=\"mt-2\"\r\n                type=\"checkbox\"\r\n                id=\"doSample\"\r\n                label={<span style={{ cursor: 'pointer' }}>Do sample ( Bool )</span>}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Top 'P' - <strong>&nbsp;Float</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"top_p\"\r\n                type=\"number\"\r\n                value={getLlmConfig().top_p}\r\n                onChange={(e) => {\r\n                  const value = parseFloat(e.target.value) || 0\r\n                  setLlmConfig({ top_p: value < 0 ? 0 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Top 'K' - <strong>&nbsp;Int</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"top_k\"\r\n                type=\"number\"\r\n                value={getLlmConfig().top_k}\r\n                onChange={(e) => {\r\n                  const value = parseInt(e.target.value) || 0\r\n                  setLlmConfig({ top_k: value < 0 ? 0 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Repetition penalty - <strong>&nbsp;Float</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"repetition_penalty\"\r\n                type=\"number\"\r\n                value={getLlmConfig().repetition_penalty}\r\n                onChange={(e) => {\r\n                  const value = parseFloat(e.target.value) || 0\r\n                  setLlmConfig({ repetition_penalty: value < 0.000001 ? 0.000001 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Length penalty - <strong>&nbsp;Float</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"length_penalty\"\r\n                type=\"number\"\r\n                value={getLlmConfig().length_penalty}\r\n                onChange={(e) => {\r\n                  const value = parseFloat(e.target.value) || 0\r\n                  setLlmConfig({ length_penalty: value < 0 ? 0 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CFormCheck\r\n              style={{ cursor: 'pointer' }}\r\n              checked={getRequestConfig().onlyNewTokens}\r\n              onChange={(e) => setRequestConfig({ onlyNewTokens: e.target.checked })}\r\n              className=\"mt-2\"\r\n              type=\"checkbox\"\r\n              id=\"onlyNewTokensCheck\"\r\n              label={\r\n                <span style={{ cursor: 'pointer' }}>\r\n                  Only return new tokens ( or include prompt )\r\n                </span>\r\n              }\r\n            />\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            {showStream && (\r\n              <CFormCheck\r\n                style={{ cursor: 'pointer' }}\r\n                checked={getRequestConfig().streamResponse}\r\n                onChange={(e) => setRequestConfig({ streamResponse: e.target.checked })}\r\n                className=\"mt-2\"\r\n                type=\"checkbox\"\r\n                id=\"isStreamResponse\"\r\n                label={\r\n                  <span style={{ cursor: 'pointer' }}>\r\n                    Stream tokens as they are being generated ( or all at once )\r\n                  </span>\r\n                }\r\n              />\r\n            )}\r\n          </CCol>\r\n        </CRow>\r\n\r\n        <div className=\"invalid-feedback d-block\">\r\n          {getLlmConfig().num_beams !== 1 && 'Multiple beams do not support streaming!'}\r\n        </div>\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default GenerationConfig\r\n","import React, { useState } from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { CButton, CCard, CCardBody, CCardHeader, CCol, CRow } from '@coreui/react'\r\nimport SyntaxHighlighter from 'react-syntax-highlighter'\r\nimport atomDark from 'react-syntax-highlighter/dist/cjs/styles/hljs/atom-one-dark'\r\nimport docco from 'react-syntax-highlighter/dist/cjs/styles/hljs/docco'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst PromptResponse = ({ requestId, response }) => {\r\n  const [rawResponse, setRawResponse] = useState(false)\r\n  const theme = useSelector(({ theme }) => {\r\n    return theme === 'auto'\r\n      ? window.matchMedia('(prefers-color-scheme: dark)').matches\r\n        ? 'dark'\r\n        : 'light'\r\n      : theme\r\n  })\r\n  const components = {\r\n    // Custom component for text\r\n    code: ({ node, ...props }) => {\r\n      return (\r\n        <span>\r\n          <SyntaxHighlighter language={props.language} style={theme === 'dark' ? atomDark : docco}>\r\n            {props.children}\r\n          </SyntaxHighlighter>\r\n        </span>\r\n      )\r\n    },\r\n  }\r\n  return (\r\n    <CCard className=\"mb-5 \">\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm={8}>\r\n            <div>Response to requestID:</div>\r\n            <small>{requestId}</small>\r\n          </CCol>\r\n          <CCol sm={4}>\r\n            <CButton\r\n              size=\"sm\"\r\n              color={rawResponse ? 'info' : 'light'}\r\n              className=\"float-end mt-2\"\r\n              onClick={() => setRawResponse(!rawResponse)}\r\n            >\r\n              {rawResponse ? 'View markdown' : 'View raw response'}\r\n            </CButton>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        {rawResponse ? (\r\n          <span className=\"markdown-llm\">{response}</span>\r\n        ) : (\r\n          <ReactMarkdown components={components} skipHtml className=\"markdown-llm\">\r\n            {response.replace(/ /g, '\\u00a0')}\r\n          </ReactMarkdown>\r\n        )}\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default PromptResponse\r\n","import React from 'react'\nimport { CBadge, CFormLabel } from '@coreui/react'\n\nconst ResponseTimes = ({ responseTimes }) => {\n  return (\n    <>\n      {responseTimes.length ? (\n        <CFormLabel htmlFor=\"exampleFormControlTextarea1\" className=\"mt-3\">\n          <strong>Response time history: </strong>\n        </CFormLabel>\n      ) : (\n        ''\n      )}\n      <div className=\"pb-3\" style={{ overflow: 'auto', whiteSpace: 'nowrap' }}>\n        {responseTimes.length\n          ? responseTimes.map((time, i) => (\n              <CBadge key={`badge-${i}-${time}`} color=\"dark\" shape=\"rounded-pill\" className=\"me-2\">\n                {(time / 1000).toFixed(3)} s\n              </CBadge>\n            ))\n          : ''}\n      </div>\n    </>\n  )\n}\n\nexport default ResponseTimes\n","import React, { useState, useEffect } from 'react'\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const timeStart = new Date().getTime()\r\n    const interval = setInterval(() => {\r\n      setSeconds((seconds) => new Date().getTime() - timeStart)\r\n    }, 99)\r\n\r\n    // Clear interval on component unmount\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <>{(seconds / 1000).toFixed(3)}</>\r\n}\r\n\r\nexport default Timer\r\n","import React, { useEffect, useState } from 'react'\nimport { CButton, CForm, CFormCheck, CFormFeedback, CFormLabel, CFormTextarea } from '@coreui/react'\nimport Timer from '../../components/Timer'\nimport { v4 as uuidv4 } from 'uuid'\nimport GenerationConfig from '../../components/GenerationConfig'\nimport PromptResponse from '../../components/PromptResponse'\nimport ResponseTimes from '../../components/ResponseTimes'\n\nconst API_PATH = `${process.env.REACT_APP_BASE_URL || ''}/api/generate-one`\n\nasync function readHttpStream(\n  url,\n  postData,\n  onChunk = () => undefined,\n  onController = () => undefined,\n) {\n  const start = new Date().getTime()\n  const controller = new AbortController()\n  const signal = controller.signal\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(postData), // Convert the JavaScript object to a JSON string\n    signal,\n  })\n  onController(controller)\n  const reader = response.body.getReader()\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) break\n    onChunk(new TextDecoder().decode(value))\n  }\n  return {\n    response,\n    responseTime: new Date().getTime() - start,\n  }\n}\n\nfunction replaceStringAtEnd(str, search, replace) {\n  if (str.endsWith(search)) {\n    return str.slice(0, -search.length) + replace\n  }\n  return str\n}\n\nconst Dashboard = () => {\n  const [requestId, setRequestId] = useState(uuidv4())\n  const [prompt, setPrompt] = useState(\n    '[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n',\n  )\n  const [isStop, setIsStop] = useState(false)\n  const [autoContinue, setAutoContinue] = useState(false)\n  const [autoScroll, setAutoScroll] = useState(true)\n  const [response, setResponse] = useState(``)\n  const [responseController, setResponseController] = useState(null)\n  const [lastResponseTime, setLastResponseTime] = useState(0)\n  const [responseTimes, setResponseTimes] = useState([])\n  const [isError, setIsError] = useState(0)\n  const [errorText, setErrorText] = useState('')\n  const [isWaiting, setIsWaiting] = useState(false)\n  const [isStreaming, setIsStreaming] = useState(false)\n  const [isContinuePrompt, setIsContinuePrompt] = useState(false)\n  const [generationConfig, setGenerationConfig] = useState({})\n  const [nonce, setNonce] = useState(0)\n\n  useEffect(() => {\n    if (autoContinue && isContinuePrompt && !isStreaming && !isWaiting && !isStop && !isError) {\n      sendPrompt() // need to allow the states to update before continuing\n    } else {\n      setIsStop(false)\n    }\n  }, [nonce])\n  const sendPrompt = async (scrollToText) => {\n    if (isContinuePrompt) {\n      window.scrollLock = scrollToText ?? window.scrollLock\n    } else {\n      setResponse('')\n      window.setTimeout(() => (window.scrollLock = scrollToText ?? window.scrollLock), 250)\n    }\n    setIsWaiting(true)\n    setIsStreaming(false)\n    setIsStop(false)\n    setErrorText('')\n    setIsError(0)\n    setLastResponseTime(0)\n\n    let fullResponse = ''\n    if (!isContinuePrompt) {\n      setResponseTimes([])\n    } else {\n      fullResponse = generationConfig?.requestConfig?.onlyNewTokens ? response : ''\n    }\n    let lastStreamChunk = ''\n    try {\n      const { responseTime, response } = await readHttpStream(\n        API_PATH,\n        {\n          request_id: requestId,\n          prompt: prompt,\n          only_new_tokens: !!generationConfig?.requestConfig?.onlyNewTokens,\n          stream_response: !!generationConfig?.requestConfig?.streamResponse,\n          generation_config: generationConfig.llmConfig,\n        },\n        (text) => {\n          lastStreamChunk = text\n          fullResponse += text\n          setIsWaiting(false)\n          setIsStreaming(true)\n          setResponse(fullResponse)\n        },\n        (controller) => setResponseController(controller),\n      )\n      if (response.status !== 200) {\n        setIsError(1)\n        window.scrollLock = false\n        autoScroll && window.scrollTo(0, 0)\n        setResponse(replaceStringAtEnd(fullResponse, lastStreamChunk, ''))\n        setErrorText(lastStreamChunk)\n      } else {\n        if (!isContinuePrompt) {\n          setResponseTimes([responseTime])\n        } else {\n          setResponseTimes([...responseTimes, responseTime])\n        }\n      }\n\n      setLastResponseTime(responseTime)\n      setNonce(nonce + 1)\n    } catch (e) {\n      if (e.name === 'AbortError') {\n        setIsError(2)\n      } else {\n        console.error(e)\n        setIsError(1)\n        window.scrollLock = false\n        autoScroll && window.scrollTo(0, 0)\n        setResponse(replaceStringAtEnd(fullResponse, lastStreamChunk, ''))\n        setErrorText(lastStreamChunk)\n      }\n\n      setResponseController(null)\n      setIsWaiting(false)\n      setIsStreaming(false)\n      setIsStop(false)\n    } finally {\n      setResponseController(null)\n      setIsWaiting(false)\n      setIsStreaming(false)\n      const isEos = fullResponse.trimEnd().endsWith('</s>')\n      setIsContinuePrompt(!isEos)\n      if (isEos) {\n        setIsStop(false)\n      }\n    }\n  }\n\n  const abortRequest = () => {\n    setIsStop(true)\n    if (responseController) {\n      responseController.abort()\n    }\n  }\n  const resetPrompt = () => {\n    setRequestId(uuidv4())\n    setIsStop(false)\n    setResponse('')\n    setResponseController(null)\n    setLastResponseTime(0)\n    setResponseTimes([])\n    setIsError(0)\n    setErrorText('')\n    setIsWaiting(false)\n    setIsStreaming(false)\n    setIsContinuePrompt(false)\n  }\n\n  return (\n    <>\n      <CForm className=\"pb-5\">\n        <GenerationConfig\n          config={generationConfig}\n          onChange={(newConfig) => setGenerationConfig(newConfig)}\n          showStream\n        />\n\n        <div className=\"mb-3\">\n          <CFormLabel htmlFor=\"exampleFormControlTextarea1\">\n            <strong>Write your prompt </strong>- <small>RequestID: {requestId}</small>\n          </CFormLabel>\n          <CFormTextarea\n            placeholder=\"[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n\"\n            disabled={isWaiting || isStreaming || isContinuePrompt}\n            value={prompt}\n            invalid={!!isError}\n            onChange={(e) => setPrompt(e.target.value)}\n            id=\"exampleFormControlTextarea1\"\n            rows={10}\n          ></CFormTextarea>\n          <CFormFeedback invalid>\n            {isError === 2\n              ? 'Aborting might cause some data to be lost, its best to reset after aborting!'\n              : errorText || 'Error generating a response, check your console'}\n          </CFormFeedback>\n        </div>\n\n        <ResponseTimes responseTimes={responseTimes} />\n\n        <div className=\"mb-3 \">\n          <CButton\n            color=\"primary\"\n            disabled={isWaiting || isStreaming || !prompt}\n            onClick={() => sendPrompt(autoScroll)}\n          >\n            {isStop && (isWaiting || isStreaming)\n              ? 'Stopping...'\n              : isWaiting\n                ? 'Waiting...'\n                : isStreaming\n                  ? 'Streaming...'\n                  : isContinuePrompt\n                    ? 'Continue'\n                    : 'Send Prompt'}\n          </CButton>\n          {isContinuePrompt && !isWaiting && !isStreaming && ' or '}\n          {!isWaiting && !isStreaming && isContinuePrompt && (\n            <CButton color=\"secondary\" disabled={isWaiting || isStreaming} onClick={resetPrompt}>\n              reset\n            </CButton>\n          )}\n          {isWaiting || isStreaming ? (\n            <CFormLabel>\n              <strong>&nbsp;&nbsp;Segment time:&nbsp;</strong>\n              <Timer /> seconds\n            </CFormLabel>\n          ) : lastResponseTime ? (\n            <CFormLabel>\n              <strong>&nbsp;&nbsp;Generation:&nbsp;</strong>\n              {responseTimes.reduce((total, time) => total + time, 0) / 1000} seconds\n            </CFormLabel>\n          ) : (\n            ''\n          )}\n          <CButton\n            color=\"secondary\"\n            className=\"float-end ms-3\"\n            disabled={!autoContinue}\n            onClick={() => setIsStop(true)}\n          >\n            Stop\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            className=\"float-end\"\n            disabled={!isWaiting && !isStreaming}\n            onClick={abortRequest}\n          >\n            Abort\n          </CButton>\n          &nbsp;&nbsp;\n        </div>\n        <CFormCheck\n          style={{ cursor: 'pointer' }}\n          checked={autoScroll}\n          onChange={(e) => setAutoScroll(e.target.checked)}\n          className=\"mt-2\"\n          type=\"checkbox\"\n          id=\"setAutoScroll\"\n          label={\n            <span style={{ cursor: 'pointer' }}>Auto scroll to follow the generated response</span>\n          }\n        />\n        <CFormCheck\n          style={{ cursor: 'pointer' }}\n          checked={autoContinue}\n          disabled={isWaiting || isStreaming}\n          onChange={(e) => setAutoContinue(e.target.checked)}\n          className=\"mt-2\"\n          type=\"checkbox\"\n          id=\"autoContinueCheck\"\n          label={\n            <span style={{ cursor: 'pointer' }}>\n              Automatically continue prompt generation when didnt reach EOS\n            </span>\n          }\n        />\n      </CForm>\n\n      {response && <PromptResponse requestId={requestId} response={response} />}\n    </>\n  )\n}\n\nexport default Dashboard\n","import React, { forwardRef, FormHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormProps extends FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Mark a form as validated. If you set it `true`, all validation styles will be applied to the forms component.\n   */\n  validated?: boolean\n}\n\nexport const CForm = forwardRef<HTMLFormElement, CFormProps>(\n  ({ children, className, validated, ...rest }, ref) => {\n    return (\n      <form\n        className={classNames({ 'was-validated': validated }, className) || undefined}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </form>\n    )\n  },\n)\n\nCForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  validated: PropTypes.bool,\n}\n\nCForm.displayName = 'CForm'\n"],"names":["defaultGenerationConfig","overrides","arguments","length","undefined","llmConfig","num_beams","do_sample","temperature","top_p","top_k","max_new_tokens","repetition_penalty","length_penalty","requestConfig","onlyNewTokens","streamResponse","_ref","onChange","showStream","defaultConfig","config","stateConfig","setStateConfig","useState","useEffect","setGenerationConfig","getLlmConfig","getRequestConfig","newConfig","updatedConfig","setLlmConfig","setRequestConfig","_jsxs","CCard","className","children","CCardHeader","_jsx","CButton","color","size","onClick","defaults","CCardBody","CRow","CCol","cm","CInputGroup","CInputGroupText","style","width","CFormInput","placeholder","type","value","e","parseFloat","target","parseInt","CFormCheck","cursor","checked","id","label","requestId","response","rawResponse","setRawResponse","theme","useSelector","_ref2","window","matchMedia","matches","components","code","_ref3","node","props","SyntaxHighlighter","language","atomDark","docco","sm","ReactMarkdown","skipHtml","replace","responseTimes","_Fragment","CFormLabel","htmlFor","overflow","whiteSpace","map","time","i","CBadge","shape","toFixed","concat","seconds","setSeconds","timeStart","Date","getTime","interval","setInterval","clearInterval","API_PATH","process","REACT_APP_BASE_URL","replaceStringAtEnd","str","search","endsWith","slice","Dashboard","setRequestId","uuidv4","prompt","setPrompt","isStop","setIsStop","autoContinue","setAutoContinue","autoScroll","setAutoScroll","setResponse","responseController","setResponseController","lastResponseTime","setLastResponseTime","setResponseTimes","isError","setIsError","errorText","setErrorText","isWaiting","setIsWaiting","isStreaming","setIsStreaming","isContinuePrompt","setIsContinuePrompt","generationConfig","nonce","setNonce","sendPrompt","async","scrollLock","scrollToText","setTimeout","fullResponse","_generationConfig$req","lastStreamChunk","_generationConfig$req2","_generationConfig$req3","responseTime","url","postData","onChunk","onController","start","controller","AbortController","signal","fetch","method","body","JSON","stringify","reader","getReader","done","read","TextDecoder","decode","readHttpStream","request_id","only_new_tokens","stream_response","generation_config","text","status","scrollTo","name","console","error","isEos","trimEnd","CForm","GenerationConfig","CFormTextarea","disabled","invalid","rows","CFormFeedback","ResponseTimes","resetPrompt","Timer","reduce","total","abortRequest","abort","PromptResponse","forwardRef","_a","ref","validated","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName"],"sourceRoot":""}