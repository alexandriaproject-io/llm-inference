{"version":3,"file":"static/js/758.a54a6f5f.chunk.js","mappings":"4TAcO,MAAMA,EAA0B,WAAqB,IAApBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnD,MAAO,CACLG,UAAW,CACTC,UAAW,EACXC,WAAW,EACXC,YAAa,EACbC,MAAO,EACPC,MAAO,GACPC,eAAgB,IAChBC,mBAAoB,EACpBC,eAAgB,KACZZ,EAAUI,WAAa,CAAC,GAE9BS,cAAe,CACbC,eAAe,EACfC,gBAAgB,KACZf,EAAUa,eAAiB,CAAC,GAGtC,EAmPA,EAjPyBG,IAKlB,IALmB,SACxBC,EAAWA,MAAe,cAC1BC,GAAa,EAAK,cAClBC,EAAgB,CAAC,EAAC,OAClBC,EAAS,CAAC,GACXJ,EACC,MAAOK,EAAaC,IAAkBC,EAAAA,EAAAA,UAASxB,EAAwBoB,KAEvEK,EAAAA,EAAAA,YAAU,KACRC,EAAoB,CAAC,EAAE,GACtB,IAEH,MAAMC,EAAeA,KAAA,IAChBL,EAAYjB,cACL,OAANgB,QAAM,IAANA,OAAM,EAANA,EAAQhB,YAAa,CAAC,IAEtBuB,EAAmBA,KAAA,IACpBN,EAAYR,kBACL,OAANO,QAAM,IAANA,OAAM,EAANA,EAAQP,gBAAiB,CAAC,IAG1BY,EAAuBG,IAC3B,MAAMC,EAAgB,CACpBzB,UAAW,IACNiB,EAAYjB,aACZwB,EAAUxB,WAEfS,cAAe,IACVQ,EAAYR,iBACZe,EAAUf,gBAGjBS,EAAeO,GACfZ,EAASY,EAAc,EAGnBC,EAAgB1B,IACpBqB,EAAoB,CAAErB,aAAY,EAG9B2B,EAAoBlB,IACxBY,EAAoB,CAAEZ,iBAAgB,EAGxC,OACEmB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,UAAU,QAAOC,SAAA,EACtBH,EAAAA,EAAAA,MAACI,EAAAA,EAAW,CAAAD,SAAA,CAAC,sBAEXE,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CACNC,MAAM,YACNC,KAAK,KACLN,UAAU,YACVO,QAASA,KACP,MAAMC,EAAW3C,EAAwBoB,GACzCG,EAAeoB,GACfzB,EAASyB,EAAS,EAClBP,SACH,uBAIHH,EAAAA,EAAAA,MAACW,EAAAA,EAAS,CAAAR,SAAA,EACRE,EAAAA,EAAAA,KAAA,SAAAF,UACEE,EAAAA,EAAAA,KAAA,YAEFL,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAAAT,SAAA,EACHE,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,UACVH,EAAAA,EAAAA,MAACe,EAAAA,EAAW,CAACb,UAAU,OAAMC,SAAA,EAC3BH,EAAAA,EAAAA,MAACgB,EAAAA,EAAe,CAACC,MAAO,CAAEC,MAAO,KAAMf,SAAA,CAAC,kBACxBE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,kBAExBE,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTC,YAAY,cACZC,KAAK,SACLC,MAAO5B,IAAenB,YACtBU,SAAWsC,IACT,MAAMD,EAAQE,WAAWD,EAAEE,OAAOH,QAAU,EAC5CxB,EAAa,CAAEvB,YAAa+C,EAAQ,EAAI,EAAIA,GAAQ,UAK5DjB,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,UACVH,EAAAA,EAAAA,MAACe,EAAAA,EAAW,CAACb,UAAU,OAAMC,SAAA,EAC3BH,EAAAA,EAAAA,MAACgB,EAAAA,EAAe,CAACC,MAAO,CAAEC,MAAO,KAAMf,SAAA,CAAC,qBACrBE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,gBAE3BE,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTC,YAAY,iBACZC,KAAK,SACLC,MAAO5B,IAAehB,eACtBO,SAAWsC,IACT,MAAMD,EAAQI,SAASH,EAAEE,OAAOH,QAAU,EAC1CxB,EAAa,CAAEpB,eAAgB4C,EAAQ,EAAI,EAAIA,GAAQ,aAMjEtB,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAAAT,SAAA,EACHE,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,UACVH,EAAAA,EAAAA,MAACe,EAAAA,EAAW,CAACb,UAAU,OAAMC,SAAA,EAC3BH,EAAAA,EAAAA,MAACgB,EAAAA,EAAe,CAACC,MAAO,CAAEC,MAAO,KAAMf,SAAA,CAAC,sBACpBE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,gBAE5BE,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTC,YAAY,YACZC,KAAK,SACLC,MAAO5B,IAAerB,UACtBY,SAAWsC,IACT,MAAMD,EAAQI,SAASH,EAAEE,OAAOH,QAAU,EAC1CxB,EAAa,CAAEzB,UAAWiD,EAAQ,EAAI,EAAIA,GAAQ,UAK1DjB,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,UACVE,EAAAA,EAAAA,KAACU,EAAAA,EAAW,CAACb,UAAU,OAAMC,UAC3BE,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CACTV,MAAO,CAAEW,OAAQ,WACjBC,QAASnC,IAAepB,UACxBW,SAAWsC,GAAMzB,EAAa,CAAExB,YAAaiD,EAAEE,OAAOI,UACtD3B,UAAU,OACVmB,KAAK,WACLS,GAAG,WACHC,OAAO1B,EAAAA,EAAAA,KAAA,QAAMY,MAAO,CAAEW,OAAQ,WAAYzB,SAAC,iCAKnDH,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAAAT,SAAA,EACHE,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,UACVH,EAAAA,EAAAA,MAACe,EAAAA,EAAW,CAACb,UAAU,OAAMC,SAAA,EAC3BH,EAAAA,EAAAA,MAACgB,EAAAA,EAAe,CAACC,MAAO,CAAEC,MAAO,KAAMf,SAAA,CAAC,cAC5BE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,kBAEpBE,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTC,YAAY,QACZC,KAAK,SACLC,MAAO5B,IAAelB,MACtBS,SAAWsC,IACT,MAAMD,EAAQE,WAAWD,EAAEE,OAAOH,QAAU,EAC5CxB,EAAa,CAAEtB,MAAO8C,EAAQ,EAAI,EAAIA,GAAQ,UAKtDjB,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,UACVH,EAAAA,EAAAA,MAACe,EAAAA,EAAW,CAACb,UAAU,OAAMC,SAAA,EAC3BH,EAAAA,EAAAA,MAACgB,EAAAA,EAAe,CAACC,MAAO,CAAEC,MAAO,KAAMf,SAAA,CAAC,cAC5BE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,gBAEpBE,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTC,YAAY,QACZC,KAAK,SACLC,MAAO5B,IAAejB,MACtBQ,SAAWsC,IACT,MAAMD,EAAQI,SAASH,EAAEE,OAAOH,QAAU,EAC1CxB,EAAa,CAAErB,MAAO6C,EAAQ,EAAI,EAAIA,GAAQ,aAMxDtB,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAAAT,SAAA,EACHE,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,UACVH,EAAAA,EAAAA,MAACe,EAAAA,EAAW,CAACb,UAAU,OAAMC,SAAA,EAC3BH,EAAAA,EAAAA,MAACgB,EAAAA,EAAe,CAACC,MAAO,CAAEC,MAAO,KAAMf,SAAA,CAAC,yBACjBE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,kBAE/BE,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTC,YAAY,qBACZC,KAAK,SACLC,MAAO5B,IAAef,mBACtBM,SAAWsC,IACT,MAAMD,EAAQE,WAAWD,EAAEE,OAAOH,QAAU,EAC5CxB,EAAa,CAAEnB,mBAAoB2C,EAAQ,KAAW,KAAWA,GAAQ,UAKjFjB,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,UACVH,EAAAA,EAAAA,MAACe,EAAAA,EAAW,CAACb,UAAU,OAAMC,SAAA,EAC3BH,EAAAA,EAAAA,MAACgB,EAAAA,EAAe,CAACC,MAAO,CAAEC,MAAO,KAAMf,SAAA,CAAC,qBACrBE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,kBAE3BE,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACTC,YAAY,iBACZC,KAAK,SACLC,MAAO5B,IAAed,eACtBK,SAAWsC,IACT,MAAMD,EAAQE,WAAWD,EAAEE,OAAOH,QAAU,EAC5CxB,EAAa,CAAElB,eAAgB0C,EAAQ,EAAI,EAAIA,GAAQ,aAMjEtB,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAAAT,SAAA,EACHE,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,UACVE,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CACTV,MAAO,CAAEW,OAAQ,WACjBC,QAASlC,IAAmBb,cAC5BG,SAAWsC,GAAMxB,EAAiB,CAAEjB,cAAeyC,EAAEE,OAAOI,UAC5D3B,UAAU,OACVmB,KAAK,WACLS,GAAG,qBACHC,OACE1B,EAAAA,EAAAA,KAAA,QAAMY,MAAO,CAAEW,OAAQ,WAAYzB,SAAC,sDAM1CE,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACC,GAAI,EAAEX,SACTjB,IACCmB,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CACTV,MAAO,CAAEW,OAAQ,WACjBC,QAASlC,IAAmBZ,eAC5BE,SAAWsC,GAAMxB,EAAiB,CAAEhB,eAAgBwC,EAAEE,OAAOI,UAC7D3B,UAAU,OACVmB,KAAK,WACLS,GAAG,mBACHC,OACE1B,EAAAA,EAAAA,KAAA,QAAMY,MAAO,CAAEW,OAAQ,WAAYzB,SAAC,yEAS9CE,EAAAA,EAAAA,KAAA,OAAKH,UAAU,2BAA0BC,SACT,IAA7BT,IAAerB,WAAmB,kDAGjC,C,oLCxQZ,MAsDA,EAtDuBW,IAA8B,IAA7B,UAAEgD,EAAS,SAAEC,GAAUjD,EAC7C,MAAOkD,EAAaC,IAAkB5C,EAAAA,EAAAA,WAAS,GACzC6C,GAAQC,EAAAA,EAAAA,KAAYC,IAAgB,IAAf,MAAEF,GAAOE,EAClC,MAAiB,SAAVF,EACHG,OAAOC,WAAW,gCAAgCC,QAChD,OACA,QACFL,CAAK,IAELM,EAAa,CAEjBC,KAAMC,IAAyB,IAAxB,KAAEC,KAASC,GAAOF,EACvB,OACEvC,EAAAA,EAAAA,KAAA,QAAAF,UACEE,EAAAA,EAAAA,KAAC0C,EAAAA,EAAiB,CAACC,SAAUF,EAAME,SAAU/B,MAAiB,SAAVmB,EAAmBa,EAAAA,EAAWC,EAAAA,EAAM/C,SACrF2C,EAAM3C,YAEJ,GAIb,OACEH,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,UAAU,QAAOC,SAAA,EACtBE,EAAAA,EAAAA,KAACD,EAAAA,EAAW,CAAAD,UACVH,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAAAT,SAAA,EACHH,EAAAA,EAAAA,MAACa,EAAAA,EAAI,CAACsC,GAAI,EAAEhD,SAAA,EACVE,EAAAA,EAAAA,KAAA,OAAAF,SAAK,4BACLE,EAAAA,EAAAA,KAAA,SAAAF,SAAQ6B,QAEV3B,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACsC,GAAI,EAAEhD,UACVE,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CACNE,KAAK,KACLD,MAAO2B,EAAc,OAAS,QAC9BhC,UAAU,iBACVO,QAASA,IAAM0B,GAAgBD,GAAa/B,SAE3C+B,EAAc,gBAAkB,8BAKzC7B,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CAAAR,SACP+B,GACC7B,EAAAA,EAAAA,KAAA,QAAMH,UAAU,eAAcC,SAAE8B,KAEhC5B,EAAAA,EAAAA,KAAC+C,EAAAA,EAAa,CAACV,WAAYA,EAAYW,UAAQ,EAACnD,UAAU,eAAcC,SACrE8B,EAASqB,QAAQ,KAAM,cAIxB,C,iFCvDZ,MAuBA,EAvBsBtE,IAAwB,IAAvB,cAAEuE,GAAevE,EACtC,OACEgB,EAAAA,EAAAA,MAAAwD,EAAAA,SAAA,CAAArD,SAAA,CACGoD,EAAcrF,QACbmC,EAAAA,EAAAA,KAACoD,EAAAA,EAAU,CAACC,QAAQ,8BAA8BxD,UAAU,OAAMC,UAChEE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,8BAGV,IAEFE,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAOe,MAAO,CAAE0C,SAAU,OAAQC,WAAY,UAAWzD,SACrEoD,EAAcrF,OACXqF,EAAcM,KAAI,CAACC,EAAMC,KACvB/D,EAAAA,EAAAA,MAACgE,EAAAA,EAAM,CAA4BzD,MAAM,OAAO0D,MAAM,eAAe/D,UAAU,OAAMC,SAAA,EACjF2D,EAAO,KAAMI,QAAQ,GAAG,OAC5B,SAAAC,OAFsBJ,EAAC,KAAAI,OAAIL,MAI7B,OAEL,C,6DCJP,QAhBA,WACE,MAAOM,EAASC,IAAc9E,EAAAA,EAAAA,UAAS,GAYvC,OAVAC,EAAAA,EAAAA,YAAU,KACR,MAAM8E,GAAY,IAAIC,MAAOC,UACvBC,EAAWC,aAAY,KAC3BL,GAAYD,IAAY,IAAIG,MAAOC,UAAYF,GAAU,GACxD,IAGH,MAAO,IAAMK,cAAcF,EAAS,GACnC,KAEIpE,EAAAA,EAAAA,KAAAmD,EAAAA,SAAA,CAAArD,UAAIiE,EAAU,KAAMF,QAAQ,IACrC,C,0PCIA,MAAMU,EAAQ,GAAAT,OAAMU,CAAAA,SAAAA,aAAAA,WAAAA,IAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,oBAAsB,GAAE,uBAsBxD,MAsSA,EAtS8BC,KAC5B,MAAOC,EAASC,IAAc1F,EAAAA,EAAAA,UAAS,CACrC,CACE2F,OAAQ,+DACRlD,WAAWmD,EAAAA,EAAAA,KACXrD,IAAIqD,EAAAA,EAAAA,MAEN,CACED,OAAQ,gEACRlD,WAAWmD,EAAAA,EAAAA,KACXrD,IAAIqD,EAAAA,EAAAA,SAGDC,EAAQC,IAAa9F,EAAAA,EAAAA,WAAS,IAC9B+F,EAAcC,IAAmBhG,EAAAA,EAAAA,WAAS,IAC1CiG,EAAWC,IAAgBlG,EAAAA,EAAAA,UAAS,KACpCmG,EAAoBC,IAAyBpG,EAAAA,EAAAA,UAAS,OACtDqG,EAAkBC,IAAuBtG,EAAAA,EAAAA,UAAS,IAClDgE,EAAeuC,IAAoBvG,EAAAA,EAAAA,UAAS,KAC5CwG,EAASC,IAAczG,EAAAA,EAAAA,UAAS,IAChC0G,EAAWC,IAAgB3G,EAAAA,EAAAA,UAAS,KACpC4G,EAAWC,IAAgB7G,EAAAA,EAAAA,WAAS,IACpC8G,EAAkBC,IAAuB/G,EAAAA,EAAAA,WAAS,IAClDgH,EAAkB9G,IAAuBF,EAAAA,EAAAA,UAAS,CAAC,IACnDiH,EAAOC,IAAYlH,EAAAA,EAAAA,UAAS,IAEnCC,EAAAA,EAAAA,YAAU,MACJ8F,IAAgBe,GAAqBF,GAAcf,GAAWW,EAGhEV,GAAU,GAFVqB,GAGF,GACC,CAACF,IAEJ,MAAME,EAAaC,UACjBP,GAAa,GACbf,GAAU,GACVa,EAAa,IACbF,EAAW,GACXH,EAAoB,GAEpB,IAAIe,EAAgB5B,EAAQnB,KAAI7E,IAAA,IAAC,UAAEgD,GAAWhD,EAAA,MAAM,CAClD6H,WAAY7E,EACZC,SAAU,GACX,IAIO,IAAD6E,EAHFT,EAIiB,OAAhBE,QAAgB,IAAhBA,GAA+B,QAAfO,EAAhBP,EAAkB1H,qBAAa,IAAAiI,GAA/BA,EAAiChI,gBACnC8H,EAAgB,IAAIpB,KAJtBM,EAAiB,IACjBL,EAAa,KAOf,IAAK,IAADsB,EACF,MAAM,aAAEC,EAAY,SAAE/E,EAAQ,KAAEgF,SA3EtCN,eAAwBO,EAAKC,GAA2C,IAAjCC,EAAYnJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAe,EACnE,MAAMoJ,GAAQ,IAAI9C,MAAOC,UACnB8C,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAC1BJ,EAAaE,GACb,MAAMrF,QAAiBwF,MAAMP,EAAK,CAChCQ,OAAQ,OACRC,KAAMC,KAAKC,UAAUV,GACrBK,WAEF,MAAO,CACLP,KACsB,MAApBhF,EAAS6F,QAAsC,MAApB7F,EAAS6F,aAC1B7F,EAASgF,aACThF,EAAS8F,OACrB9F,WACA+E,cAAc,IAAIzC,MAAOC,UAAY6C,EAEzC,CAyDqDW,CAC7CpD,EACA,CACEI,QAASA,EAAQnB,KAAIvB,IAAA,IAAC,UAAEN,EAAS,OAAEkD,GAAQ5C,EAAA,MAAM,CAAEuE,WAAY7E,EAAWkD,SAAQ,IAClF+C,kBAAmC,OAAhB1B,QAAgB,IAAhBA,GAA+B,QAAfQ,EAAhBR,EAAkB1H,qBAAa,IAAAkI,IAA/BA,EAAiCjI,eACpDoJ,kBAAmB3B,EAAiBnI,YAErCkJ,IACC3B,EAAsB2B,EAAW,IAGrC,GAAwB,MAApBrF,EAAS6F,QAAsC,MAApB7F,EAAS6F,OAAgB,CACtDrC,EACEwB,EAAKpD,KAAI,CAACsE,EAAMC,KACd,MAAMC,EAAOzB,EAAc0B,MAAK1F,IAAA,IAAC,WAAEiE,GAAYjE,EAAA,OAAKiE,IAAesB,EAAKtB,UAAU,KAAK,CACrF5E,SAAU,IAEZ,MAAO,IACFkG,EACHlG,SAAWoG,EAAKpG,WAAakG,EAAKjD,QAAU,IAAMiD,EAAKlG,SACxD,KAMH6D,EAHGO,EAGc,IAAI9C,EAAeyD,GAFnB,CAACA,IAIpBnB,EAAoBmB,GACpBP,EAASD,EAAQ,GACjB,MAAM+B,EAA4B,MAApBtG,EAAS6F,OACvBxB,GAAqBiC,GACjBA,GACFlD,GAAU,EAEd,MACEW,EAAW,GACXE,EAAae,EAEjB,CAAE,MAAO1F,GACQ,eAAXA,EAAEiH,KACJxC,EAAW,IAEXyC,QAAQC,MAAMnH,GACdyE,EAAW,GACXE,EAAa3E,EAAEoH,UAGjBhD,EAAsB,MACtBS,GAAa,GACbf,GAAU,EACZ,CAAC,QACCM,EAAsB,MACtBS,GAAa,EACf,GAoCIwC,EAAeA,CAAC9G,EAAIoD,KACxB,MAAMkD,EAAQpD,EAAQ6D,WAAWC,GAASA,EAAKhH,KAAOA,IACtDkD,EAAQoD,GAAS,IACZpD,EAAQoD,MACRlD,GAELD,EAAW,IAAID,GAAS,EAE1B,OACEhF,EAAAA,EAAAA,MAAAwD,EAAAA,SAAA,CAAArD,SAAA,EACEH,EAAAA,EAAAA,MAAC+I,EAAAA,EAAK,CAAC7I,UAAU,OAAMC,SAAA,EACrBE,EAAAA,EAAAA,KAAC2I,EAAAA,EAAgB,CACf5J,OAAQmH,EACRtH,SAAWW,GAAcH,EAAoBG,GAC7CV,YAAU,KAEZmB,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAAAT,SACF6E,EAAQnB,KAAI,CAAAoF,EAA4Bb,KAAK,IAAhC,OAAElD,EAAM,UAAElD,EAAS,GAAEF,GAAImH,EAAA,OACrC5I,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACsC,GAAI,EAAGjD,UAAU,OAAMC,UAC3BH,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAE,SAAA,EACJH,EAAAA,EAAAA,MAACe,EAAAA,EAAW,CAAAZ,SAAA,EACVE,EAAAA,EAAAA,KAACW,EAAAA,EAAe,CAAAb,SAAC,eACjBE,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CACT+H,SAAU/C,GAAaE,EACvBjF,YAAY,YACZC,KAAK,OACLC,MAAOU,EACP/C,SAAWsC,GAAMqH,EAAa9G,EAAI,CAAEE,UAAWT,EAAEE,OAAOH,UAEzD8G,EAAQ,IACP/H,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CACN4I,SAAU7C,EACV9F,MAAM,SACNE,QAASA,IAhDPqB,KACpB,MAAMsG,EAAQpD,EAAQ6D,WAAWC,GAASA,EAAKhH,KAAOA,IACtDkD,EAAQmE,OAAOf,EAAO,GACtBnD,EAAW,IAAID,GAAS,EA6CSoE,CAAatH,GAAI3B,UAEhCE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,gBAIdE,EAAAA,EAAAA,KAACgJ,EAAAA,EAAa,CACZjI,YAAY,iEACZ8H,SAAU/C,GAAaE,EACvB/E,MAAO4D,EACPoE,UAAWvD,IAAYb,EACvBjG,SAAWsC,GAAMqH,EAAa9G,EAAI,CAAEoD,OAAQ3D,EAAEE,OAAOH,QACrDQ,GAAG,8BACHyH,KAAM,SAEF,gBAAApF,OA9ByCrC,GA+B5C,QAIRiE,IACD1F,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gCAA+BC,SAC/B,IAAZ4F,EACG,+EACAE,GAAa,qDAIrB5F,EAAAA,EAAAA,KAACmJ,EAAAA,EAAa,CAACjG,cAAeA,KAE9BvD,EAAAA,EAAAA,MAAA,OAAKE,UAAU,QAAOC,SAAA,EACpBH,EAAAA,EAAAA,MAACM,EAAAA,EAAO,CACNC,MAAM,UACN2I,SAAU/C,GAAaE,EACvB5F,QAASA,KA5EjBwE,EAAW,IACND,EACH,CACEhD,WAAWmD,EAAAA,EAAAA,KACXD,OAAQ,GACRpD,IAAIqD,EAAAA,EAAAA,OAuE2B,EAAAhF,SAAA,CAE1B,IAAI,IACH,QAEJE,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CACNJ,UAAU,OACVK,MAAM,UACN2I,SAAU/C,IAAcnB,EAAQyE,OAAMC,IAAA,IAAC,OAAExE,GAAQwE,EAAA,QAAOxE,CAAM,IAC9DzE,QAASA,IAAMiG,IAAavG,SAE3BiF,GAAUe,EACP,cACAA,EACE,aACAE,EACE,WACA,gBAETA,IAAqBF,GAAa,QACjCA,GAAaE,IACbhG,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,YAAY2I,SAAU/C,EAAW1F,QAnHtCkJ,KAClBtE,GAAU,GACVI,EAAa,IACbR,EAAWD,EAAQnB,KAAKqB,IAAM,IAAWA,EAAQlD,WAAWmD,EAAAA,EAAAA,UAC5DQ,EAAsB,MACtBE,EAAoB,GACpBC,EAAiB,IACjBE,EAAW,GACXE,EAAa,IACbE,GAAa,GACbE,GAAoB,EAAM,EAyGmDnG,SAAC,UAIvEgG,GACCnG,EAAAA,EAAAA,MAACyD,EAAAA,EAAU,CAAAtD,SAAA,EACTE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,+BACRE,EAAAA,EAAAA,KAACuJ,EAAAA,EAAK,IAAG,cAEThE,GACF5F,EAAAA,EAAAA,MAACyD,EAAAA,EAAU,CAAAtD,SAAA,EACTE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,4BACPoD,EAAcsG,QAAO,CAACC,EAAOhG,IAASgG,EAAQhG,GAAM,GAAK,IAAK,cAGjE,IAEFzD,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CACNC,MAAM,YACNL,UAAU,iBACVgJ,UAAW5D,EACX7E,QAASA,IAAM4E,GAAU,GAAMlF,SAChC,UAGDE,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CACNC,MAAM,YACNL,UAAU,YACVgJ,UAAW/C,EACX1F,QAtJWsJ,KACnB1E,GAAU,GACNK,GACFA,EAAmBsE,OACrB,EAkJ8B7J,SACvB,UAES,eAGZE,EAAAA,EAAAA,KAACsB,EAAAA,EAAU,CACTV,MAAO,CAAEW,OAAQ,WACjBC,QAASyD,EACT4D,SAAU/C,EACVlH,SAAWsC,GAAMgE,EAAgBhE,EAAEE,OAAOI,SAC1C3B,UAAU,OACVmB,KAAK,WACLS,GAAG,oBACHC,OACE1B,EAAAA,EAAAA,KAAA,QAAMY,MAAO,CAAEW,OAAQ,WAAYzB,SAAC,wEAM1CE,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAAAT,SACFqF,EAAU3B,KAAIoG,IAAA,IAAC,WAAEpD,EAAU,SAAE5E,GAAUgI,EAAA,OACtC5J,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACsC,GAAI,EAAGjD,UAAU,OAAMC,UAC3BE,EAAAA,EAAAA,KAAC6J,EAAAA,EAAc,CAAkBlI,UAAW6E,EAAY5E,SAAUA,GAA7C4E,IAAyD,gBAAA1C,OAD7B0C,GAE5C,QAGV,C,4FC7TMkC,GAAQoB,EAAAA,EAAAA,aACnB,SAACC,EAA6CC,GAA3C,IAAAlK,EAAQiK,EAAAjK,SAAED,EAASkK,EAAAlK,UAAEoK,EAASF,EAAAE,UAAKC,GAArCC,EAAAA,EAAAA,IAAAJ,EAAA,sCACC,OACEK,EAAAA,cACE,QAAAC,EAAAA,EAAAA,IAAA,CAAAxK,WAAWyK,EAAAA,EAAAA,GAAW,CAAE,gBAAiBL,GAAapK,SAAc/B,GAChEoM,EACJ,CAAAF,IAAKA,IAEJlK,EAGP,IAGF4I,EAAM6B,UAAY,CAChBzK,SAAU0K,IAAAA,KACV3K,UAAW2K,IAAAA,OACXP,UAAWO,IAAAA,MAGb9B,EAAM+B,YAAc,O","sources":["components/GenerationConfig.js","components/PromptResponse.js","components/ResponseTimes.js","components/Timer.js","views/rest-api-batch/RestApiBatchDashboard.js","../node_modules/@coreui/react/src/components/form/CForm.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CFormCheck,\r\n  CFormInput,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n} from '@coreui/react'\r\n\r\nexport const defaultGenerationConfig = (overrides = {}) => {\r\n  return {\r\n    llmConfig: {\r\n      num_beams: 1,\r\n      do_sample: true,\r\n      temperature: 1,\r\n      top_p: 1,\r\n      top_k: 50,\r\n      max_new_tokens: 100,\r\n      repetition_penalty: 1,\r\n      length_penalty: 1,\r\n      ...(overrides.llmConfig || {}),\r\n    },\r\n    requestConfig: {\r\n      onlyNewTokens: true,\r\n      streamResponse: true,\r\n      ...(overrides.requestConfig || {}),\r\n    },\r\n  }\r\n}\r\n\r\nconst GenerationConfig = ({\r\n  onChange = () => undefined,\r\n  showStream = false,\r\n  defaultConfig = {},\r\n  config = {},\r\n}) => {\r\n  const [stateConfig, setStateConfig] = useState(defaultGenerationConfig(defaultConfig))\r\n\r\n  useEffect(() => {\r\n    setGenerationConfig({})\r\n  }, [])\r\n\r\n  const getLlmConfig = () => ({\r\n    ...stateConfig.llmConfig,\r\n    ...(config?.llmConfig || {}),\r\n  })\r\n  const getRequestConfig = () => ({\r\n    ...stateConfig.requestConfig,\r\n    ...(config?.requestConfig || {}),\r\n  })\r\n\r\n  const setGenerationConfig = (newConfig) => {\r\n    const updatedConfig = {\r\n      llmConfig: {\r\n        ...stateConfig.llmConfig,\r\n        ...newConfig.llmConfig,\r\n      },\r\n      requestConfig: {\r\n        ...stateConfig.requestConfig,\r\n        ...newConfig.requestConfig,\r\n      },\r\n    }\r\n    setStateConfig(updatedConfig)\r\n    onChange(updatedConfig)\r\n  }\r\n\r\n  const setLlmConfig = (llmConfig) => {\r\n    setGenerationConfig({ llmConfig })\r\n  }\r\n\r\n  const setRequestConfig = (requestConfig) => {\r\n    setGenerationConfig({ requestConfig })\r\n  }\r\n\r\n  return (\r\n    <CCard className=\"mb-3 \">\r\n      <CCardHeader>\r\n        Generation Config:\r\n        <CButton\r\n          color=\"secondary\"\r\n          size=\"sm\"\r\n          className=\"float-end\"\r\n          onClick={() => {\r\n            const defaults = defaultGenerationConfig(defaultConfig)\r\n            setStateConfig(defaults)\r\n            onChange(defaults)\r\n          }}\r\n        >\r\n          reset defaults\r\n        </CButton>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <small>\r\n          <br />\r\n        </small>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Temperature - <strong>&nbsp;Float</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"temperature\"\r\n                type=\"number\"\r\n                value={getLlmConfig().temperature}\r\n                onChange={(e) => {\r\n                  const value = parseFloat(e.target.value) || 0\r\n                  setLlmConfig({ temperature: value < 0 ? 0 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Max new Tokens - <strong>&nbsp;Int</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"max_new_tokens\"\r\n                type=\"number\"\r\n                value={getLlmConfig().max_new_tokens}\r\n                onChange={(e) => {\r\n                  const value = parseInt(e.target.value) || 0\r\n                  setLlmConfig({ max_new_tokens: value < 1 ? 1 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Number of Beams - <strong>&nbsp;Int</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"num_beams\"\r\n                type=\"number\"\r\n                value={getLlmConfig().num_beams}\r\n                onChange={(e) => {\r\n                  const value = parseInt(e.target.value) || 0\r\n                  setLlmConfig({ num_beams: value < 1 ? 1 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CFormCheck\r\n                style={{ cursor: 'pointer' }}\r\n                checked={getLlmConfig().do_sample}\r\n                onChange={(e) => setLlmConfig({ do_sample: !!e.target.checked })}\r\n                className=\"mt-2\"\r\n                type=\"checkbox\"\r\n                id=\"doSample\"\r\n                label={<span style={{ cursor: 'pointer' }}>Do sample ( Bool )</span>}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Top 'P' - <strong>&nbsp;Float</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"top_p\"\r\n                type=\"number\"\r\n                value={getLlmConfig().top_p}\r\n                onChange={(e) => {\r\n                  const value = parseFloat(e.target.value) || 0\r\n                  setLlmConfig({ top_p: value < 0 ? 0 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Top 'K' - <strong>&nbsp;Int</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"top_k\"\r\n                type=\"number\"\r\n                value={getLlmConfig().top_k}\r\n                onChange={(e) => {\r\n                  const value = parseInt(e.target.value) || 0\r\n                  setLlmConfig({ top_k: value < 0 ? 0 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Repetition penalty - <strong>&nbsp;Float</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"repetition_penalty\"\r\n                type=\"number\"\r\n                value={getLlmConfig().repetition_penalty}\r\n                onChange={(e) => {\r\n                  const value = parseFloat(e.target.value) || 0\r\n                  setLlmConfig({ repetition_penalty: value < 0.000001 ? 0.000001 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            <CInputGroup className=\"mb-3\">\r\n              <CInputGroupText style={{ width: 205 }}>\r\n                Length penalty - <strong>&nbsp;Float</strong>\r\n              </CInputGroupText>\r\n              <CFormInput\r\n                placeholder=\"length_penalty\"\r\n                type=\"number\"\r\n                value={getLlmConfig().length_penalty}\r\n                onChange={(e) => {\r\n                  const value = parseFloat(e.target.value) || 0\r\n                  setLlmConfig({ length_penalty: value < 0 ? 0 : value })\r\n                }}\r\n              />\r\n            </CInputGroup>\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <CCol cm={6}>\r\n            <CFormCheck\r\n              style={{ cursor: 'pointer' }}\r\n              checked={getRequestConfig().onlyNewTokens}\r\n              onChange={(e) => setRequestConfig({ onlyNewTokens: e.target.checked })}\r\n              className=\"mt-2\"\r\n              type=\"checkbox\"\r\n              id=\"onlyNewTokensCheck\"\r\n              label={\r\n                <span style={{ cursor: 'pointer' }}>\r\n                  Only return new tokens ( or include prompt )\r\n                </span>\r\n              }\r\n            />\r\n          </CCol>\r\n          <CCol cm={6}>\r\n            {showStream && (\r\n              <CFormCheck\r\n                style={{ cursor: 'pointer' }}\r\n                checked={getRequestConfig().streamResponse}\r\n                onChange={(e) => setRequestConfig({ streamResponse: e.target.checked })}\r\n                className=\"mt-2\"\r\n                type=\"checkbox\"\r\n                id=\"isStreamResponse\"\r\n                label={\r\n                  <span style={{ cursor: 'pointer' }}>\r\n                    Stream tokens as they are being generated ( or all at once )\r\n                  </span>\r\n                }\r\n              />\r\n            )}\r\n          </CCol>\r\n        </CRow>\r\n\r\n        <div className=\"invalid-feedback d-block\">\r\n          {getLlmConfig().num_beams !== 1 && 'Multiple beams do not support streaming!'}\r\n        </div>\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default GenerationConfig\r\n","import React, { useState } from 'react'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { CButton, CCard, CCardBody, CCardHeader, CCol, CRow } from '@coreui/react'\r\nimport SyntaxHighlighter from 'react-syntax-highlighter'\r\nimport atomDark from 'react-syntax-highlighter/dist/cjs/styles/hljs/atom-one-dark'\r\nimport docco from 'react-syntax-highlighter/dist/cjs/styles/hljs/docco'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst PromptResponse = ({ requestId, response }) => {\r\n  const [rawResponse, setRawResponse] = useState(false)\r\n  const theme = useSelector(({ theme }) => {\r\n    return theme === 'auto'\r\n      ? window.matchMedia('(prefers-color-scheme: dark)').matches\r\n        ? 'dark'\r\n        : 'light'\r\n      : theme\r\n  })\r\n  const components = {\r\n    // Custom component for text\r\n    code: ({ node, ...props }) => {\r\n      return (\r\n        <span>\r\n          <SyntaxHighlighter language={props.language} style={theme === 'dark' ? atomDark : docco}>\r\n            {props.children}\r\n          </SyntaxHighlighter>\r\n        </span>\r\n      )\r\n    },\r\n  }\r\n  return (\r\n    <CCard className=\"mb-5 \">\r\n      <CCardHeader>\r\n        <CRow>\r\n          <CCol sm={8}>\r\n            <div>Response to requestID:</div>\r\n            <small>{requestId}</small>\r\n          </CCol>\r\n          <CCol sm={4}>\r\n            <CButton\r\n              size=\"sm\"\r\n              color={rawResponse ? 'info' : 'light'}\r\n              className=\"float-end mt-2\"\r\n              onClick={() => setRawResponse(!rawResponse)}\r\n            >\r\n              {rawResponse ? 'View markdown' : 'View raw response'}\r\n            </CButton>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        {rawResponse ? (\r\n          <span className=\"markdown-llm\">{response}</span>\r\n        ) : (\r\n          <ReactMarkdown components={components} skipHtml className=\"markdown-llm\">\r\n            {response.replace(/ /g, '\\u00a0')}\r\n          </ReactMarkdown>\r\n        )}\r\n      </CCardBody>\r\n    </CCard>\r\n  )\r\n}\r\n\r\nexport default PromptResponse\r\n","import React from 'react'\nimport { CBadge, CFormLabel } from '@coreui/react'\n\nconst ResponseTimes = ({ responseTimes }) => {\n  return (\n    <>\n      {responseTimes.length ? (\n        <CFormLabel htmlFor=\"exampleFormControlTextarea1\" className=\"mt-3\">\n          <strong>Response time history: </strong>\n        </CFormLabel>\n      ) : (\n        ''\n      )}\n      <div className=\"pb-3\" style={{ overflow: 'auto', whiteSpace: 'nowrap' }}>\n        {responseTimes.length\n          ? responseTimes.map((time, i) => (\n              <CBadge key={`badge-${i}-${time}`} color=\"dark\" shape=\"rounded-pill\" className=\"me-2\">\n                {(time / 1000).toFixed(3)} s\n              </CBadge>\n            ))\n          : ''}\n      </div>\n    </>\n  )\n}\n\nexport default ResponseTimes\n","import React, { useState, useEffect } from 'react'\r\n\r\nfunction Timer() {\r\n  const [seconds, setSeconds] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const timeStart = new Date().getTime()\r\n    const interval = setInterval(() => {\r\n      setSeconds((seconds) => new Date().getTime() - timeStart)\r\n    }, 99)\r\n\r\n    // Clear interval on component unmount\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <>{(seconds / 1000).toFixed(3)}</>\r\n}\r\n\r\nexport default Timer\r\n","import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport Timer from '../../components/Timer'\nimport { v4 as uuidv4 } from 'uuid'\nimport GenerationConfig from '../../components/GenerationConfig'\nimport PromptResponse from '../../components/PromptResponse'\nimport ResponseTimes from '../../components/ResponseTimes'\n\nconst API_PATH = `${process.env.REACT_APP_BASE_URL || ''}/api/generate-batch`\n\nasync function postHttp(url, postData, onController = () => undefined) {\n  const start = new Date().getTime()\n  const controller = new AbortController()\n  const signal = controller.signal\n  onController(controller)\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(postData), // Convert the JavaScript object to a JSON string\n    signal,\n  })\n  return {\n    json:\n      response.status === 200 || response.status === 206\n        ? await response.json()\n        : await response.text(),\n    response,\n    responseTime: new Date().getTime() - start,\n  }\n}\n\nconst RestApiBatchDashboard = () => {\n  const [prompts, setPrompts] = useState([\n    {\n      prompt: '[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n',\n      requestId: uuidv4(),\n      id: uuidv4(),\n    },\n    {\n      prompt: '[INST] Generate a very short poem about 1000 dogs [/INST]\\n\\n',\n      requestId: uuidv4(),\n      id: uuidv4(),\n    },\n  ])\n  const [isStop, setIsStop] = useState(false)\n  const [autoContinue, setAutoContinue] = useState(false)\n  const [responses, setResponses] = useState([])\n  const [responseController, setResponseController] = useState(null)\n  const [lastResponseTime, setLastResponseTime] = useState(0)\n  const [responseTimes, setResponseTimes] = useState([])\n  const [isError, setIsError] = useState(0)\n  const [errorText, setErrorText] = useState('')\n  const [isWaiting, setIsWaiting] = useState(false)\n  const [isContinuePrompt, setIsContinuePrompt] = useState(false)\n  const [generationConfig, setGenerationConfig] = useState({})\n  const [nonce, setNonce] = useState(0)\n\n  useEffect(() => {\n    if (autoContinue && isContinuePrompt && !isWaiting && !isStop && !isError) {\n      sendPrompt() // need to allow the states to update before continuing\n    } else {\n      setIsStop(false)\n    }\n  }, [nonce])\n\n  const sendPrompt = async () => {\n    setIsWaiting(true)\n    setIsStop(false)\n    setErrorText('')\n    setIsError(0)\n    setLastResponseTime(0)\n\n    let fullResponses = prompts.map(({ requestId }) => ({\n      request_id: requestId,\n      response: '',\n    }))\n    if (!isContinuePrompt) {\n      setResponseTimes([])\n      setResponses([])\n    } else {\n      if (generationConfig?.requestConfig?.onlyNewTokens) {\n        fullResponses = [...responses]\n      }\n    }\n\n    try {\n      const { responseTime, response, json } = await postHttp(\n        API_PATH,\n        {\n          prompts: prompts.map(({ requestId, prompt }) => ({ request_id: requestId, prompt })),\n          only_new_tokens: !!generationConfig?.requestConfig?.onlyNewTokens,\n          generation_config: generationConfig.llmConfig,\n        },\n        (controller) => {\n          setResponseController(controller)\n        },\n      )\n      if (response.status === 200 || response.status === 206) {\n        setResponses(\n          json.map((data, index) => {\n            const full = fullResponses.find(({ request_id }) => request_id === data.request_id) || {\n              response: '',\n            }\n            return {\n              ...data,\n              response: (full.response += (data.prompt || '') + data.response),\n            }\n          }),\n        )\n        if (!isContinuePrompt) {\n          setResponseTimes([responseTime])\n        } else {\n          setResponseTimes([...responseTimes, responseTime])\n        }\n        setLastResponseTime(responseTime)\n        setNonce(nonce + 1)\n        const isEos = response.status === 200\n        setIsContinuePrompt(!isEos)\n        if (isEos) {\n          setIsStop(false)\n        }\n      } else {\n        setIsError(1)\n        setErrorText(json)\n      }\n    } catch (e) {\n      if (e.name === 'AbortError') {\n        setIsError(2)\n      } else {\n        console.error(e)\n        setIsError(1)\n        setErrorText(e.message)\n      }\n\n      setResponseController(null)\n      setIsWaiting(false)\n      setIsStop(false)\n    } finally {\n      setResponseController(null)\n      setIsWaiting(false)\n    }\n  }\n\n  const abortRequest = () => {\n    setIsStop(true)\n    if (responseController) {\n      responseController.abort()\n    }\n  }\n  const resetPrompt = () => {\n    setIsStop(false)\n    setResponses([])\n    setPrompts(prompts.map((prompt) => ({ ...prompt, requestId: uuidv4() })))\n    setResponseController(null)\n    setLastResponseTime(0)\n    setResponseTimes([])\n    setIsError(0)\n    setErrorText('')\n    setIsWaiting(false)\n    setIsContinuePrompt(false)\n  }\n  const removePrompt = (id) => {\n    const index = prompts.findIndex((item) => item.id === id)\n    prompts.splice(index, 1)\n    setPrompts([...prompts])\n  }\n  const addPrompt = () => {\n    setPrompts([\n      ...prompts,\n      {\n        requestId: uuidv4(),\n        prompt: '',\n        id: uuidv4(),\n      },\n    ])\n  }\n  const updatePrompt = (id, prompt) => {\n    const index = prompts.findIndex((item) => item.id === id)\n    prompts[index] = {\n      ...prompts[index],\n      ...prompt,\n    }\n    setPrompts([...prompts])\n  }\n  return (\n    <>\n      <CForm className=\"pb-5\">\n        <GenerationConfig\n          config={generationConfig}\n          onChange={(newConfig) => setGenerationConfig(newConfig)}\n          showStream\n        />\n        <CRow>\n          {prompts.map(({ prompt, requestId, id }, index) => (\n            <CCol sm={6} className=\"mt-4\" key={`batch-prompt-${id}`}>\n              <CCard>\n                <CInputGroup>\n                  <CInputGroupText>RequestId</CInputGroupText>\n                  <CFormInput\n                    disabled={isWaiting || isContinuePrompt}\n                    placeholder=\"requestId\"\n                    type=\"text\"\n                    value={requestId}\n                    onChange={(e) => updatePrompt(id, { requestId: e.target.value })}\n                  />\n                  {index > 1 && (\n                    <CButton\n                      disabled={isContinuePrompt}\n                      color=\"danger\"\n                      onClick={() => removePrompt(id)}\n                    >\n                      <strong>Clear</strong>\n                    </CButton>\n                  )}\n                </CInputGroup>\n                <CFormTextarea\n                  placeholder=\"[INST] Generate a very long poem about 1000 cats [/INST]\\n\\n\"\n                  disabled={isWaiting || isContinuePrompt}\n                  value={prompt}\n                  invalid={!!isError || !prompt}\n                  onChange={(e) => updatePrompt(id, { prompt: e.target.value })}\n                  id=\"exampleFormControlTextarea1\"\n                  rows={10}\n                ></CFormTextarea>\n              </CCard>\n            </CCol>\n          ))}\n        </CRow>\n\n        {!!isError && (\n          <div className=\"invalid-feedback d-block mt-0\">\n            {isError === 2\n              ? 'Aborting might cause some data to be lost, its best to reset after aborting!'\n              : errorText || 'Error generating a response, check your console'}\n          </div>\n        )}\n\n        <ResponseTimes responseTimes={responseTimes} />\n\n        <div className=\"mb-3 \">\n          <CButton\n            color=\"primary\"\n            disabled={isWaiting || isContinuePrompt}\n            onClick={() => addPrompt()}\n          >\n            {' '}\n            +{' '}\n          </CButton>\n          <CButton\n            className=\"ms-3\"\n            color=\"primary\"\n            disabled={isWaiting || !prompts.every(({ prompt }) => !!prompt)}\n            onClick={() => sendPrompt()}\n          >\n            {isStop && isWaiting\n              ? 'Stopping...'\n              : isWaiting\n                ? 'Waiting...'\n                : isContinuePrompt\n                  ? 'Continue'\n                  : 'Send Prompt'}\n          </CButton>\n          {isContinuePrompt && !isWaiting && ' or '}\n          {!isWaiting && isContinuePrompt && (\n            <CButton color=\"secondary\" disabled={isWaiting} onClick={resetPrompt}>\n              reset\n            </CButton>\n          )}\n          {isWaiting ? (\n            <CFormLabel>\n              <strong>&nbsp;&nbsp;Segment time:&nbsp;</strong>\n              <Timer /> seconds\n            </CFormLabel>\n          ) : lastResponseTime ? (\n            <CFormLabel>\n              <strong>&nbsp;&nbsp;Generation:&nbsp;</strong>\n              {responseTimes.reduce((total, time) => total + time, 0) / 1000} seconds\n            </CFormLabel>\n          ) : (\n            ''\n          )}\n          <CButton\n            color=\"secondary\"\n            className=\"float-end ms-3\"\n            disabled={!autoContinue}\n            onClick={() => setIsStop(true)}\n          >\n            Stop\n          </CButton>\n          <CButton\n            color=\"secondary\"\n            className=\"float-end\"\n            disabled={!isWaiting}\n            onClick={abortRequest}\n          >\n            Abort\n          </CButton>\n          &nbsp;&nbsp;\n        </div>\n        <CFormCheck\n          style={{ cursor: 'pointer' }}\n          checked={autoContinue}\n          disabled={isWaiting}\n          onChange={(e) => setAutoContinue(e.target.checked)}\n          className=\"mt-2\"\n          type=\"checkbox\"\n          id=\"autoContinueCheck\"\n          label={\n            <span style={{ cursor: 'pointer' }}>\n              Automatically continue prompt generation when didnt reach EOS\n            </span>\n          }\n        />\n      </CForm>\n      <CRow>\n        {responses.map(({ request_id, response }) => (\n          <CCol sm={6} className=\"mt-4\" key={`batch-prompt-${request_id}`}>\n            <PromptResponse key={request_id} requestId={request_id} response={response} />\n          </CCol>\n        ))}\n      </CRow>\n    </>\n  )\n}\n\nexport default RestApiBatchDashboard\n","import React, { forwardRef, FormHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormProps extends FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Mark a form as validated. If you set it `true`, all validation styles will be applied to the forms component.\n   */\n  validated?: boolean\n}\n\nexport const CForm = forwardRef<HTMLFormElement, CFormProps>(\n  ({ children, className, validated, ...rest }, ref) => {\n    return (\n      <form\n        className={classNames({ 'was-validated': validated }, className) || undefined}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </form>\n    )\n  },\n)\n\nCForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  validated: PropTypes.bool,\n}\n\nCForm.displayName = 'CForm'\n"],"names":["defaultGenerationConfig","overrides","arguments","length","undefined","llmConfig","num_beams","do_sample","temperature","top_p","top_k","max_new_tokens","repetition_penalty","length_penalty","requestConfig","onlyNewTokens","streamResponse","_ref","onChange","showStream","defaultConfig","config","stateConfig","setStateConfig","useState","useEffect","setGenerationConfig","getLlmConfig","getRequestConfig","newConfig","updatedConfig","setLlmConfig","setRequestConfig","_jsxs","CCard","className","children","CCardHeader","_jsx","CButton","color","size","onClick","defaults","CCardBody","CRow","CCol","cm","CInputGroup","CInputGroupText","style","width","CFormInput","placeholder","type","value","e","parseFloat","target","parseInt","CFormCheck","cursor","checked","id","label","requestId","response","rawResponse","setRawResponse","theme","useSelector","_ref2","window","matchMedia","matches","components","code","_ref3","node","props","SyntaxHighlighter","language","atomDark","docco","sm","ReactMarkdown","skipHtml","replace","responseTimes","_Fragment","CFormLabel","htmlFor","overflow","whiteSpace","map","time","i","CBadge","shape","toFixed","concat","seconds","setSeconds","timeStart","Date","getTime","interval","setInterval","clearInterval","API_PATH","process","REACT_APP_BASE_URL","RestApiBatchDashboard","prompts","setPrompts","prompt","uuidv4","isStop","setIsStop","autoContinue","setAutoContinue","responses","setResponses","responseController","setResponseController","lastResponseTime","setLastResponseTime","setResponseTimes","isError","setIsError","errorText","setErrorText","isWaiting","setIsWaiting","isContinuePrompt","setIsContinuePrompt","generationConfig","nonce","setNonce","sendPrompt","async","fullResponses","request_id","_generationConfig$req","_generationConfig$req2","responseTime","json","url","postData","onController","start","controller","AbortController","signal","fetch","method","body","JSON","stringify","status","text","postHttp","only_new_tokens","generation_config","data","index","full","find","isEos","name","console","error","message","updatePrompt","findIndex","item","CForm","GenerationConfig","_ref4","disabled","splice","removePrompt","CFormTextarea","invalid","rows","ResponseTimes","every","_ref5","resetPrompt","Timer","reduce","total","abortRequest","abort","_ref6","PromptResponse","forwardRef","_a","ref","validated","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName"],"sourceRoot":""}