#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import com.inference.common.ttypes

from thrift.transport import TTransport
all_structs = []


class WsInferenceRequest(object):
    """
    Attributes:
     - prompts
     - stream_response
     - only_new_tokens
     - generation_config

    """


    def __init__(self, prompts=None, stream_response=None, only_new_tokens=None, generation_config=None,):
        self.prompts = prompts
        self.stream_response = stream_response
        self.only_new_tokens = only_new_tokens
        self.generation_config = generation_config

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.prompts = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = com.inference.common.ttypes.SinglePrompt()
                        _elem5.read(iprot)
                        self.prompts.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.stream_response = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.only_new_tokens = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.generation_config = com.inference.common.ttypes.GenerationConfig()
                    self.generation_config.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsInferenceRequest')
        if self.prompts is not None:
            oprot.writeFieldBegin('prompts', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.prompts))
            for iter6 in self.prompts:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.stream_response is not None:
            oprot.writeFieldBegin('stream_response', TType.BOOL, 2)
            oprot.writeBool(self.stream_response)
            oprot.writeFieldEnd()
        if self.only_new_tokens is not None:
            oprot.writeFieldBegin('only_new_tokens', TType.BOOL, 3)
            oprot.writeBool(self.only_new_tokens)
            oprot.writeFieldEnd()
        if self.generation_config is not None:
            oprot.writeFieldBegin('generation_config', TType.STRUCT, 4)
            self.generation_config.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WsInferenceAcceptedEvent(object):
    """
    Attributes:
     - request_id

    """


    def __init__(self, request_id=None,):
        self.request_id = request_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.request_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsInferenceAcceptedEvent')
        if self.request_id is not None:
            oprot.writeFieldBegin('request_id', TType.STRING, 1)
            oprot.writeString(self.request_id.encode('utf-8') if sys.version_info[0] == 2 else self.request_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WsInferenceStartedEvent(object):
    """
    Attributes:
     - request_id

    """


    def __init__(self, request_id=None,):
        self.request_id = request_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.request_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsInferenceStartedEvent')
        if self.request_id is not None:
            oprot.writeFieldBegin('request_id', TType.STRING, 1)
            oprot.writeString(self.request_id.encode('utf-8') if sys.version_info[0] == 2 else self.request_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WsInferenceInitializedEvent(object):
    """
    Attributes:
     - request_id
     - text

    """


    def __init__(self, request_id=None, text=None,):
        self.request_id = request_id
        self.text = text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.request_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsInferenceInitializedEvent')
        if self.request_id is not None:
            oprot.writeFieldBegin('request_id', TType.STRING, 1)
            oprot.writeString(self.request_id.encode('utf-8') if sys.version_info[0] == 2 else self.request_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 3)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WsInferenceProgressEvent(object):
    """
    Attributes:
     - request_id
     - text

    """


    def __init__(self, request_id=None, text=None,):
        self.request_id = request_id
        self.text = text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.request_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsInferenceProgressEvent')
        if self.request_id is not None:
            oprot.writeFieldBegin('request_id', TType.STRING, 1)
            oprot.writeString(self.request_id.encode('utf-8') if sys.version_info[0] == 2 else self.request_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 3)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WsInferenceCompletionEvent(object):
    """
    Attributes:
     - request_id
     - text
     - is_eos
     - new_tokens_count
     - execution_time

    """


    def __init__(self, request_id=None, text=None, is_eos=None, new_tokens_count=None, execution_time=None,):
        self.request_id = request_id
        self.text = text
        self.is_eos = is_eos
        self.new_tokens_count = new_tokens_count
        self.execution_time = execution_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.request_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.is_eos = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.new_tokens_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.execution_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsInferenceCompletionEvent')
        if self.request_id is not None:
            oprot.writeFieldBegin('request_id', TType.STRING, 1)
            oprot.writeString(self.request_id.encode('utf-8') if sys.version_info[0] == 2 else self.request_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 3)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.is_eos is not None:
            oprot.writeFieldBegin('is_eos', TType.BOOL, 4)
            oprot.writeBool(self.is_eos)
            oprot.writeFieldEnd()
        if self.new_tokens_count is not None:
            oprot.writeFieldBegin('new_tokens_count', TType.I32, 5)
            oprot.writeI32(self.new_tokens_count)
            oprot.writeFieldEnd()
        if self.execution_time is not None:
            oprot.writeFieldBegin('execution_time', TType.DOUBLE, 6)
            oprot.writeDouble(self.execution_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WsInferenceErrorEvent(object):
    """
    Attributes:
     - request_id
     - error

    """


    def __init__(self, request_id=None, error=None,):
        self.request_id = request_id
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.request_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.error = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsInferenceErrorEvent')
        if self.request_id is not None:
            oprot.writeFieldBegin('request_id', TType.STRING, 1)
            oprot.writeString(self.request_id.encode('utf-8') if sys.version_info[0] == 2 else self.request_id)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRING, 3)
            oprot.writeString(self.error.encode('utf-8') if sys.version_info[0] == 2 else self.error)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WsErrorEvent(object):
    """
    Attributes:
     - error

    """


    def __init__(self, error=None,):
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 3:
                if ftype == TType.STRING:
                    self.error = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsErrorEvent')
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRING, 3)
            oprot.writeString(self.error.encode('utf-8') if sys.version_info[0] == 2 else self.error)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WsInferenceEvent(object):
    """
    Attributes:
     - acceptedEvent
     - startedEvent
     - initializedEvent
     - progressEvent
     - completionEvent
     - errorEvent
     - wsErrorEvent

    """


    def __init__(self, acceptedEvent=None, startedEvent=None, initializedEvent=None, progressEvent=None, completionEvent=None, errorEvent=None, wsErrorEvent=None,):
        self.acceptedEvent = acceptedEvent
        self.startedEvent = startedEvent
        self.initializedEvent = initializedEvent
        self.progressEvent = progressEvent
        self.completionEvent = completionEvent
        self.errorEvent = errorEvent
        self.wsErrorEvent = wsErrorEvent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.acceptedEvent = WsInferenceAcceptedEvent()
                    self.acceptedEvent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.startedEvent = WsInferenceStartedEvent()
                    self.startedEvent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.initializedEvent = WsInferenceInitializedEvent()
                    self.initializedEvent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.progressEvent = WsInferenceProgressEvent()
                    self.progressEvent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.completionEvent = WsInferenceCompletionEvent()
                    self.completionEvent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.errorEvent = WsInferenceErrorEvent()
                    self.errorEvent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.wsErrorEvent = WsInferenceErrorEvent()
                    self.wsErrorEvent.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsInferenceEvent')
        if self.acceptedEvent is not None:
            oprot.writeFieldBegin('acceptedEvent', TType.STRUCT, 1)
            self.acceptedEvent.write(oprot)
            oprot.writeFieldEnd()
        if self.startedEvent is not None:
            oprot.writeFieldBegin('startedEvent', TType.STRUCT, 2)
            self.startedEvent.write(oprot)
            oprot.writeFieldEnd()
        if self.initializedEvent is not None:
            oprot.writeFieldBegin('initializedEvent', TType.STRUCT, 3)
            self.initializedEvent.write(oprot)
            oprot.writeFieldEnd()
        if self.progressEvent is not None:
            oprot.writeFieldBegin('progressEvent', TType.STRUCT, 4)
            self.progressEvent.write(oprot)
            oprot.writeFieldEnd()
        if self.completionEvent is not None:
            oprot.writeFieldBegin('completionEvent', TType.STRUCT, 5)
            self.completionEvent.write(oprot)
            oprot.writeFieldEnd()
        if self.errorEvent is not None:
            oprot.writeFieldBegin('errorEvent', TType.STRUCT, 6)
            self.errorEvent.write(oprot)
            oprot.writeFieldEnd()
        if self.wsErrorEvent is not None:
            oprot.writeFieldBegin('wsErrorEvent', TType.STRUCT, 7)
            self.wsErrorEvent.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WsInferenceResponse(object):
    """
    Attributes:
     - events

    """


    def __init__(self, events=None,):
        self.events = events

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.events = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = WsInferenceEvent()
                        _elem12.read(iprot)
                        self.events.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WsInferenceResponse')
        if self.events is not None:
            oprot.writeFieldBegin('events', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.events))
            for iter13 in self.events:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(WsInferenceRequest)
WsInferenceRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'prompts', (TType.STRUCT, [com.inference.common.ttypes.SinglePrompt, None], False), None, ),  # 1
    (2, TType.BOOL, 'stream_response', None, None, ),  # 2
    (3, TType.BOOL, 'only_new_tokens', None, None, ),  # 3
    (4, TType.STRUCT, 'generation_config', [com.inference.common.ttypes.GenerationConfig, None], None, ),  # 4
)
all_structs.append(WsInferenceAcceptedEvent)
WsInferenceAcceptedEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'request_id', 'UTF8', None, ),  # 1
)
all_structs.append(WsInferenceStartedEvent)
WsInferenceStartedEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'request_id', 'UTF8', None, ),  # 1
)
all_structs.append(WsInferenceInitializedEvent)
WsInferenceInitializedEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'request_id', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'text', 'UTF8', None, ),  # 3
)
all_structs.append(WsInferenceProgressEvent)
WsInferenceProgressEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'request_id', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'text', 'UTF8', None, ),  # 3
)
all_structs.append(WsInferenceCompletionEvent)
WsInferenceCompletionEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'request_id', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'text', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'is_eos', None, None, ),  # 4
    (5, TType.I32, 'new_tokens_count', None, None, ),  # 5
    (6, TType.DOUBLE, 'execution_time', None, None, ),  # 6
)
all_structs.append(WsInferenceErrorEvent)
WsInferenceErrorEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'request_id', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'error', 'UTF8', None, ),  # 3
)
all_structs.append(WsErrorEvent)
WsErrorEvent.thrift_spec = (
    None,  # 0
    None,  # 1
    None,  # 2
    (3, TType.STRING, 'error', 'UTF8', None, ),  # 3
)
all_structs.append(WsInferenceEvent)
WsInferenceEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'acceptedEvent', [WsInferenceAcceptedEvent, None], None, ),  # 1
    (2, TType.STRUCT, 'startedEvent', [WsInferenceStartedEvent, None], None, ),  # 2
    (3, TType.STRUCT, 'initializedEvent', [WsInferenceInitializedEvent, None], None, ),  # 3
    (4, TType.STRUCT, 'progressEvent', [WsInferenceProgressEvent, None], None, ),  # 4
    (5, TType.STRUCT, 'completionEvent', [WsInferenceCompletionEvent, None], None, ),  # 5
    (6, TType.STRUCT, 'errorEvent', [WsInferenceErrorEvent, None], None, ),  # 6
    (7, TType.STRUCT, 'wsErrorEvent', [WsInferenceErrorEvent, None], None, ),  # 7
)
all_structs.append(WsInferenceResponse)
WsInferenceResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'events', (TType.STRUCT, [WsInferenceEvent, None], False), None, ),  # 1
)
fix_spec(all_structs)
del all_structs
