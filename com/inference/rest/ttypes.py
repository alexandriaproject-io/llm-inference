#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import com.inference.common.ttypes

from thrift.transport import TTransport
all_structs = []


class ApiSinglePromptRequest(object):
    """
    Attributes:
     - request_id
     - prompt
     - stream_response
     - only_new_tokens
     - generation_config

    """


    def __init__(self, request_id=None, prompt=None, stream_response=None, only_new_tokens=None, generation_config=None,):
        self.request_id = request_id
        self.prompt = prompt
        self.stream_response = stream_response
        self.only_new_tokens = only_new_tokens
        self.generation_config = generation_config

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.request_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prompt = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.stream_response = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.only_new_tokens = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.generation_config = com.inference.common.ttypes.GenerationConfig()
                    self.generation_config.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ApiSinglePromptRequest')
        if self.request_id is not None:
            oprot.writeFieldBegin('request_id', TType.STRING, 1)
            oprot.writeString(self.request_id.encode('utf-8') if sys.version_info[0] == 2 else self.request_id)
            oprot.writeFieldEnd()
        if self.prompt is not None:
            oprot.writeFieldBegin('prompt', TType.STRING, 2)
            oprot.writeString(self.prompt.encode('utf-8') if sys.version_info[0] == 2 else self.prompt)
            oprot.writeFieldEnd()
        if self.stream_response is not None:
            oprot.writeFieldBegin('stream_response', TType.BOOL, 3)
            oprot.writeBool(self.stream_response)
            oprot.writeFieldEnd()
        if self.only_new_tokens is not None:
            oprot.writeFieldBegin('only_new_tokens', TType.BOOL, 4)
            oprot.writeBool(self.only_new_tokens)
            oprot.writeFieldEnd()
        if self.generation_config is not None:
            oprot.writeFieldBegin('generation_config', TType.STRUCT, 5)
            self.generation_config.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.request_id is None:
            raise TProtocolException(message='Required field request_id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ApiSinglePromptStream(object):
    """
    Attributes:
     - text

    """


    def __init__(self, text=None,):
        self.text = text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ApiSinglePromptStream')
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 1)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ApiBatchPromptRequest(object):
    """
    Attributes:
     - prompts
     - only_new_tokens
     - generation_config

    """


    def __init__(self, prompts=None, only_new_tokens=None, generation_config=None,):
        self.prompts = prompts
        self.only_new_tokens = only_new_tokens
        self.generation_config = generation_config

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.prompts = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = com.inference.common.ttypes.SinglePrompt()
                        _elem5.read(iprot)
                        self.prompts.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.only_new_tokens = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.generation_config = com.inference.common.ttypes.GenerationConfig()
                    self.generation_config.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ApiBatchPromptRequest')
        if self.prompts is not None:
            oprot.writeFieldBegin('prompts', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.prompts))
            for iter6 in self.prompts:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.only_new_tokens is not None:
            oprot.writeFieldBegin('only_new_tokens', TType.BOOL, 2)
            oprot.writeBool(self.only_new_tokens)
            oprot.writeFieldEnd()
        if self.generation_config is not None:
            oprot.writeFieldBegin('generation_config', TType.STRUCT, 3)
            self.generation_config.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ApiSinglePromptRequest)
ApiSinglePromptRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'request_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prompt', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'stream_response', None, None, ),  # 3
    (4, TType.BOOL, 'only_new_tokens', None, None, ),  # 4
    (5, TType.STRUCT, 'generation_config', [com.inference.common.ttypes.GenerationConfig, None], None, ),  # 5
)
all_structs.append(ApiSinglePromptStream)
ApiSinglePromptStream.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'text', 'UTF8', None, ),  # 1
)
all_structs.append(ApiBatchPromptRequest)
ApiBatchPromptRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'prompts', (TType.STRUCT, [com.inference.common.ttypes.SinglePrompt, None], False), None, ),  # 1
    (2, TType.BOOL, 'only_new_tokens', None, None, ),  # 2
    (3, TType.STRUCT, 'generation_config', [com.inference.common.ttypes.GenerationConfig, None], None, ),  # 3
)
fix_spec(all_structs)
del all_structs
